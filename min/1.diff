1c1
< % This is etex.ch, a
---
> % This is etex.ch in text format, as of January 31, 1999.
3c3
< % to be applied to tex.web in order to define the
---
> % to be applied to tex.web (Version 3.14159) in order to define the
5,10c5,11
<  
< % e-TeX is copyright (C) 1999-2012 by P. Breitenlohner (1994,98 by the NTS
< % team); all rights are reserved. Copying of this file is authorized only if
< % (1) you are P. Breitenlohner, or if (2) you make absolutely no changes to
< % your copy. (Programs such as TIE allow the application of several change
< % files to tex.web; the master files tex.web and etex.ch should stay intact.)
---
> 
> % e-TeX is copyright (C) 1994,98 by the NTS team; all rights are reserved.
> % Copying of this file is authorized only if (1) you are a member of the
> % NTS team, or if (2) you make absolutely no changes to your copy.
> % (Programs such as PATCHWEB, TIE, or WEBMERGE allow the application of
> % several change files to tex.web; the master files tex.web and etex.ch
> % should stay intact.)
19c20
< % All line numbers refer to tex.web 3.14159265 as of January 20, 2014.
---
> % All line numbers refer to TEX.WEB 3.14159 as of March 21, 1995.
32,36c33,38
< % e-TeX is copyright (C) 1999-2012 by P. Breitenlohner (1994,98 by the NTS
< % team); all rights are reserved. Copying of this file is authorized only if
< % (1) you are P. Breitenlohner, or if (2) you make absolutely no changes to
< % your copy. (Programs such as TIE allow the application of several change
< % files to tex.web; the master files tex.web and etex.ch should stay intact.)
---
> % e-TeX is copyright (C) 1994,98 by the NTS team; all rights are reserved.
> % Copying of this file is authorized only if (1) you are a member of the
> % NTS team, or if (2) you make absolutely no changes to your copy.
> % (Programs such as PATCHWEB, TIE, or WEBMERGE allow the application of
> % several change files to tex.web; the master files tex.web and etex.ch
> % should stay intact.)
54c56
< @x limbo l.51 - e-TeX history
---
> @x limbo l.50 - e-TeX history
74,109c76
< % Version 2.1 fixed a \marks bug (when min_halfword<>0) (January 1999).
< % Version 2.2 development was started in Feb 2003; released in Oct 2004.
< %             fixed a bug in sparse array handling (0=>null), Jun 2002;
< %             fixed a bug in \lastnodetype (cur_val=>cur_val_level)
< %                 reported by Hartmut Henkel <hartmut_henkel@@gmx.de>,
< %                 fix by Fabrice Popineau <Fabrice.Popineau@@supelec.fr>,
< %                 Jan 2004;
< %             another bug in sparse array handling (cur_ptr=>cur_chr)
< %                 reported by Taco Hoekwater <taco@@elvenkind.com>, Jul 2004;
< %             fixed a sparse array reference count bug (\let,\futurelet),
< %                 fix by Bernd Raichle <berd@@dante.de>, Aug 2004;
< %             reorganized handling of banner, additional token list and
< %                 integer parameters, and similar in order to reduce the
< %                 interference between eTeX, pdfTeX, and web2c change files.
< %             adapted to tex.web 3.141592, revised glue rounding for mixed
< %                 direction typesetting;
< %             fixed a bug in the revised glue rounding code, detected by
< %                 Tigran Aivazian <tigran@@aivazian.fsnet.co.uk>, Oct 2004.
< % Version 2.3 development was started in Feb 2008; released in Apr 2011.
< %             fixed a bug in hyph_code handling (\savinghyphcodes)
< %                 reported by Vladimir Volovich <vvv@@vsu.ru>, Feb 2008.
< %             fixed the error messages for improper use of \protected,
< %                 reported by Heiko Oberdiek
< %                 <heiko.oberdiek@@googlemail.com>, May 2010.
< %             some rearrangements to reduce interferences between
< %                 e-TeX and pTeX, in part suggested by Hironori Kitagawa
< %                 <h_kitagawa2001@@yahoo.co.jp>, Mar 2011.
< % Version 2.4 fixed an uninitialized line number bug, released in May 2012.
< % Version 2.5 development was started in Aug 2012; released in Feb 2013.
< %             better tracing of font definitions, reported by
< %                 Bruno Le Floch <blflatex@@gmail.com>, Jul 2012.
< % Version 2.6 development was started in Mar 2013; released in ??? 201?.
< %             enable hyphenation of text between \beginL and \endL or
< %                 between \beginR and \endR, problem reported by
< %                 Vafa Khalighi <vafalgk@@gmail.com>, Nov 2013.
< %             better handling of right-to-left text -- to be done.
---
> % Version 2.1 fixed a marks bug (when min_halfword<>0) (January 1999).
112c79
< % correct and reliable, no warranty is implied; the author disclaims any
---
> % correct and reliable, no warranty is implied; the authors disclaim any
116c83
< % been a ``labor of love'' and the author hopes that users enjoy it.
---
> % been a ``labor of love'' and the authors hope that users enjoy it.
119c86
< @x limbo l.63 - e-TeX logo, TeXXeT
---
> @x limbo l.61 - e-TeX logo, TeXXeT
149c116
< @x limbo l.66 - bug fix (print only changed modules)
---
> @x limbo l.64 - bug fix (print only changed modules)
156c123
< @x limbo l.82 - e-TeX basic
---
> @x limbo l.80 - e-TeX basic
167c134
< @x [1] m.1 l.93 - this is e-TeX
---
> @x [1] m.1 l.91 - this is e-TeX
174c141
< @x [1] m.2 l.182 - e-TeX basic
---
> @x [1] m.2 l.179 - e-TeX basic
181c148
< @x [1] m.2 l.188 - e-TeX basic
---
> @x [1] m.2 l.185 - e-TeX basic
191,192c158,159
< @x [1] m.2 l.190 - e-TeX basic
< @d banner=='This is TeX, Version 3.14159265' {printed when \TeX\ starts}
---
> @x [1] m.2 l.187 - e-TeX basic
> @d banner=='This is TeX, Version 3.14159' {printed when \TeX\ starts}
193a161,163
> @d banner=='This is TeX, Version 3.14159' {printed when \TeX\ starts}
> @#
> @d eTeX_version_string=='3.14159-2.1' {current \eTeX\ version}
195,196c165
< @d eTeX_revision==".6" { \.{\\eTeXrevision} }
< @d eTeX_version_string=='-2.6' {current \eTeX\ version}
---
> @d eTeX_revision==".1" { \.{\\eTeXrevision} }
198c167
< @d eTeX_banner=='This is e-TeX, Version 3.14159265',eTeX_version_string
---
> @d eTeX_banner=='This is e-TeX, Version ',eTeX_version_string
201,204d169
< @d TeX_banner=='This is TeX, Version 3.14159265' {printed when \TeX\ starts}
< @#
< @d banner==eTeX_banner
< @#
212,219c177
< @x [1] m.3 l.209 - e-TeX basic
< scalar types; there are no `\&{var}' parameters, except in the case of files;
< @y
< scalar types; there are no `\&{var}' parameters, except in the case of files
< --- \eTeX, however, does use `\&{var}' parameters for the |reverse| function;
< @z
< %---------------------------------------
< @x [1] m.15 l.504 - e-TeX basic
---
> @x [1] m.15 l.493 - e-TeX basic
229,230c187,188
< @x [10] m.135 l.2895 - e-TeX TeXXeT
< |fil|, |fill|, or |filll|). The |subtype| field is not used.
---
> @x [5] m.61 l.1556 - e-TeX basic
> wterm(banner);
232,233c190
< |fil|, |fill|, or |filll|). The |subtype| field is not used in \TeX.
< In \eTeX\ the |subtype| field records the box direction mode |box_lr|.
---
> wterm(eTeX_banner);
236c193
< @x [10] m.141 l.2980 - e-TeX marks
---
> @x [10] m.141 l.2965 - e-TeX marks
244c201
< @x [10] m.141 l.2986 - e-TeX marks
---
> @x [10] m.141 l.2971 - e-TeX marks
251c208
< @x [10] m.142 l.2995 - e-TeX marks
---
> @x [10] m.142 l.2980 - e-TeX marks
258c215
< @x [10] m.147 l.3084 - e-TeX TeXXeT
---
> @x [10] m.147 l.3069 - e-TeX TeXXeT
269c226
< @x [10] m.147 l.3088 - e-TeX TeXXeT
---
> @x [10] m.147 l.3073 - e-TeX TeXXeT
289c246
< @x [12] m.175 l.3561 - e-TeX TeXXeT
---
> @x [12] m.175 l.3546 - e-TeX TeXXeT
296c253
< @x [12] m.184 l.3728 - e-TeX TeXXeT
---
> @x [12] m.184 l.3713 - e-TeX TeXXeT
305c262
< @x [12] m.192 l.3826 - e-TeX TeXXeT
---
> @x [12] m.192 l.3811 - e-TeX TeXXeT
318c275
< @x [12] m.196 l.3859 - e-TeX marks
---
> @x [12] m.196 l.3844 - e-TeX marks
328c285
< @x [15] m.208 l.4096 - e-TeX saved_items
---
> @x [15] m.208 l.4081 - e-TeX saved_items
335c292
< @x [15] m.208 l.4106 - e-TeX TeXXeT
---
> @x [15] m.208 l.4091 - e-TeX TeXXeT
342c299
< @x [15] m.208 l.4122 - e-TeX middle
---
> @x [15] m.208 l.4107 - e-TeX middle
349c306
< @x [15] m.209 l.4166 - e-TeX basic
---
> @x [15] m.209 l.4151 - e-TeX basic
356c313
< @x [15] m.209 l.4168 - e-TeX penalties
---
> @x [15] m.209 l.4153 - e-TeX penalties
363c320
< @x [15] m.209 l.4178 - e-TeX protected
---
> @x [15] m.209 l.4163 - e-TeX protected
370c327
< @x [15] m.209 l.4181 - e-TeX read_line
---
> @x [15] m.209 l.4166 - e-TeX read_line
377c334
< @x [15] m.210 l.4196 - e-TeX scan_tokens
---
> @x [15] m.210 l.4181 - e-TeX scan_tokens
384c341
< @x [15] m.210 l.4201 - e-TeX unexpanded
---
> @x [15] m.210 l.4186 - e-TeX unexpanded
391c348
< @x [16] m.212 l.4304 - e-TeX basic
---
> @x [16] m.212 l.4289 - e-TeX basic
404c361
< @x [16] m.212 l.4319 - e-TeX basic
---
> @x [16] m.212 l.4304 - e-TeX basic
411c368
< @x [16] m.213 l.4326 - e-TeX basic
---
> @x [16] m.213 l.4311 - e-TeX basic
421c378
< @x [16] m.215 l.4357 - e-TeX basic
---
> @x [16] m.215 l.4342 - e-TeX basic
428c385
< @x [16] m.216 l.4373 push_nest - e-TeX basic
---
> @x [16] m.216 l.4358 push_nest - e-TeX basic
435c392,401
< @x [17] m.230 l.4736 - e-TeX basic, every_eof
---
> @x [17] m.230 l.4712 - e-TeX basic, penalties
> @d output_routine_loc=local_base+1 {points to token list for \.{\\output}}
> @d every_par_loc=local_base+2 {points to token list for \.{\\everypar}}
> @d every_math_loc=local_base+3 {points to token list for \.{\\everymath}}
> @d every_display_loc=local_base+4 {points to token list for \.{\\everydisplay}}
> @d every_hbox_loc=local_base+5 {points to token list for \.{\\everyhbox}}
> @d every_vbox_loc=local_base+6 {points to token list for \.{\\everyvbox}}
> @d every_job_loc=local_base+7 {points to token list for \.{\\everyjob}}
> @d every_cr_loc=local_base+8 {points to token list for \.{\\everycr}}
> @d err_help_loc=local_base+9 {points to token list for \.{\\errhelp}}
438,444c404,419
< @d tex_toks=local_base+10 {end of \TeX's token list parameters}
< @#
< @d etex_toks_base=tex_toks {base for \eTeX's token list parameters}
< @d every_eof_loc=etex_toks_base {points to token list for \.{\\everyeof}}
< @d etex_toks=etex_toks_base+1 {end of \eTeX's token list parameters}
< @#
< @d toks_base=etex_toks {table of 256 token list registers}
---
> @d inter_line_penalties_loc=local_base+1 {additional penalties between lines}
> @d club_penalties_loc=local_base+2 {penalties for creating club lines}
> @d widow_penalties_loc=local_base+3 {penalties for creating widow lines}
> @d display_widow_penalties_loc=local_base+4 {ditto, just before a display}
> @d token_base=local_base+5 {table of token list parameters}
> @d output_routine_loc=token_base {points to token list for \.{\\output}}
> @d every_par_loc=token_base+1 {points to token list for \.{\\everypar}}
> @d every_math_loc=token_base+2 {points to token list for \.{\\everymath}}
> @d every_display_loc=token_base+3 {points to token list for \.{\\everydisplay}}
> @d every_hbox_loc=token_base+4 {points to token list for \.{\\everyhbox}}
> @d every_vbox_loc=token_base+5 {points to token list for \.{\\everyvbox}}
> @d every_job_loc=token_base+6 {points to token list for \.{\\everyjob}}
> @d every_cr_loc=token_base+7 {points to token list for \.{\\everycr}}
> @d every_eof_loc=token_base+8 {points to token list for \.{\\everyeof}}
> @d err_help_loc=token_base+9 {points to token list for \.{\\errhelp}}
> @d toks_base=token_base+10 {table of 256 token list registers}
447,461c422
< @x [17] m.230 l.4737 - e-TeX basic, penalties
< @d box_base=toks_base+256 {table of 256 box registers}
< @y
< @#
< @d etex_pen_base=toks_base+256 {start of table of \eTeX's penalties}
< @d inter_line_penalties_loc=etex_pen_base {additional penalties between lines}
< @d club_penalties_loc=etex_pen_base+1 {penalties for creating club lines}
< @d widow_penalties_loc=etex_pen_base+2 {penalties for creating widow lines}
< @d display_widow_penalties_loc=etex_pen_base+3 {ditto, just before a display}
< @d etex_pens=etex_pen_base+4 {end of table of \eTeX's penalties}
< @#
< @d box_base=etex_pens {table of 256 box registers}
< @z
< %---------------------------------------
< @x [17] m.231 l.4802 - e-TeX basic
---
> @x [17] m.231 l.4787 - e-TeX basic
468c429
< @x [17] m.232 l.4820 - e-TeX penalties
---
> @x [17] m.232 l.4805 - e-TeX penalties
472c433
< for k:=etex_pen_base to etex_pens-1 do
---
> for k:=par_shape_loc+1 to token_base-1 do
476c437
< @x [17] m.233 l.4848 - e-TeX penalties
---
> @x [17] m.233 l.4833 - e-TeX penalties
479a441
>   else print_int(info(par_shape_ptr));
481c443
< if (n=par_shape_loc) or ((n>=etex_pen_base) and (n<etex_pens)) then
---
> if n<token_base then
488a451
>   else print_int(info(par_shape_ptr));
491,492c454,455
< @x [17] m.236 l.4969 - e-TeX basic
< @d int_pars=55 {total number of integer parameters}
---
> @x [17] m.236 l.4955 - e-TeX basic
> @d count_base=int_base+int_pars {256 user \.{\\count} registers}
494,509c457,469
< @d tex_int_pars=55 {total number of \TeX's integer parameters}
< @#
< @d etex_int_base=tex_int_pars {base for \eTeX's integer parameters}
< @d tracing_assigns_code=etex_int_base {show assignments}
< @d tracing_groups_code=etex_int_base+1 {show save/restore groups}
< @d tracing_ifs_code=etex_int_base+2 {show conditionals}
< @d tracing_scan_tokens_code=etex_int_base+3 {show pseudo file open and close}
< @d tracing_nesting_code=etex_int_base+4 {show incomplete groups and ifs within files}
< @d pre_display_direction_code=etex_int_base+5 {text direction preceding a display}
< @d last_line_fit_code=etex_int_base+6 {adjustment for last line of paragraph}
< @d saving_vdiscards_code=etex_int_base+7 {save items discarded from vlists}
< @d saving_hyph_codes_code=etex_int_base+8 {save hyphenation codes for languages}
< @d eTeX_state_code=etex_int_base+9 {\eTeX\ state variables}
< @d etex_int_pars=eTeX_state_code+eTeX_states {total number of \eTeX's integer parameters}
< @#
< @d int_pars=etex_int_pars {total number of integer parameters}
---
> @d tracing_assigns_code=int_pars {show assignments}
> @d tracing_groups_code=int_pars+1 {show save/restore groups}
> @d tracing_ifs_code=int_pars+2 {show conditionals}
> @d tracing_scan_tokens_code=int_pars+3 {show pseudo file open and close}
> @d tracing_nesting_code=int_pars+4
>   {show incomplete groups and ifs within files}
> @d pre_display_direction_code=int_pars+5 {text direction preceding a display}
> @d last_line_fit_code=int_pars+6 {adjustment for last line of paragraph}
> @d saving_vdiscards_code=int_pars+7 {save items discarded from vlists}
> @d saving_hyph_codes_code=int_pars+8 {save hyphenation codes for languages}
> @d eTeX_state_code=int_pars+9 {\eTeX\ state variables}
> @d count_base=int_base+eTeX_state_code+eTeX_states
>   {256 user \.{\\count} registers}
512c472
< @x [17] m.236 l.5031 - e-TeX basic
---
> @x [17] m.236 l.5016 - e-TeX basic
516d475
< @#
528c487
< @x [17] m.237 l.5096 print_param - e-TeX basic
---
> @x [17] m.237 l.5081 print_param - e-TeX basic
535c494
< @x [18] m.264 l.5627 primitive - e-TeX basic
---
> @x [18] m.264 l.5612 primitive - e-TeX basic
541c500
< @x [18] m.264 l.5631 primitive - e-TeX basic
---
> @x [18] m.264 l.5616 primitive - e-TeX basic
554c513
< @x [18] m.265 l.5706 - e-TeX penalties
---
> @x [18] m.265 l.5691 - e-TeX penalties
560c519
< @x [18] m.265 l.5723 - e-TeX sparse arrays
---
> @x [18] m.265 l.5708 - e-TeX sparse arrays
566c525
< @x [18] m.266 l.5756 - e-TeX cond
---
> @x [18] m.266 l.5741 - e-TeX cond
573c532
< @x [18] m.266 l.5762 - e-TeX marks
---
> @x [18] m.266 l.5747 - e-TeX marks
581c540
< @x [18] m.266 l.5773 - e-TeX read_line
---
> @x [18] m.266 l.5758 - e-TeX read_line
588c547
< @x [18] m.266 l.5777 - e-TeX penalties
---
> @x [18] m.266 l.5762 - e-TeX penalties
597c556
< @x [18] m.266 l.5778 - e-TeX unexpanded
---
> @x [18] m.266 l.5763 - e-TeX unexpanded
604c563
< @x [18] m.266 l.5779 - e-TeX sparse arrays
---
> @x [18] m.266 l.5764 - e-TeX sparse arrays
610c569
< @x [18] m.266 l.5781 - e-TeX TeXXeT
---
> @x [18] m.266 l.5766 - e-TeX TeXXeT
617c576
< @x [19] m.268 l.5815 - e-TeX sparse arrays
---
> @x [19] m.268 l.5800 - e-TeX sparse arrays
623c582
< @x [19] m.268 l.5835 - e-TeX tracing
---
> @x [19] m.268 l.5820 - e-TeX tracing
636c595
< @x [19] m.268 l.5845 - e-TeX basic
---
> @x [19] m.268 l.5830 - e-TeX basic
645c604
< @x [19] m.273 l.5903 - e-TeX tracing
---
> @x [19] m.273 l.5888 - e-TeX tracing
651c610
< @x [19] m.273 l.5909 check_full_save_stack - e-TeX tracing
---
> @x [19] m.273 l.5894 check_full_save_stack - e-TeX tracing
657c616
< @x [19] m.274 l.5931 new_save_level - e-TeX tracing
---
> @x [19] m.274 l.5916 new_save_level - e-TeX tracing
666c625
< @x [19] m.274 l.5938 new_save_level - e-TeX tracing
---
> @x [19] m.274 l.5923 new_save_level - e-TeX tracing
674c633
< @x [19] m.275 l.5956 eq_destroy - e-TeX sparse arrays
---
> @x [19] m.275 l.5941 eq_destroy - e-TeX sparse arrays
681c640
< @x [19] m.277 l.5978 - e-TeX tracing
---
> @x [19] m.277 l.5963 - e-TeX tracing
690c649
< @x [19] m.277 l.5982 eq_define - e-TeX tracing
---
> @x [19] m.277 l.5967 eq_define - e-TeX tracing
702c661
< @x [19] m.277 l.5985 eq_define - e-TeX tracing
---
> @x [19] m.277 l.5970 eq_define - e-TeX tracing
709c668
< @x [19] m.278 l.5992 eq_word_define - e-TeX tracing
---
> @x [19] m.278 l.5977 eq_word_define - e-TeX tracing
721c680
< @x [19] m.278 l.5996 eq_word_define - e-TeX tracing
---
> @x [19] m.278 l.5981 eq_word_define - e-TeX tracing
728c687
< @x [19] m.279 l.6005 geq_define - e-TeX tracing
---
> @x [19] m.279 l.5990 geq_define - e-TeX tracing
739c698
< @x [19] m.279 l.6010 geq_word_define - e-TeX tracing
---
> @x [19] m.279 l.5995 geq_word_define - e-TeX tracing
748c707
< @x [19] m.281 l.6027 - e-TeX tracing
---
> @x [19] m.281 l.6012 - e-TeX tracing
754c713
< @x [19] m.281 l.6034 unsave - e-TeX optimized \aftergroup
---
> @x [19] m.281 l.6019 unsave - e-TeX optimized \aftergroup
762c721
< @x [19] m.282 l.6048 - e-TeX sparse arrays
---
> @x [19] m.282 l.6033 - e-TeX sparse arrays
771c730
< @x [19] m.282 l.6056 - e-TeX tracing
---
> @x [19] m.282 l.6041 - e-TeX tracing
781c740
< @x [19] m.284 l.6082 - e-TeX tracing
---
> @x [19] m.284 l.6067 - e-TeX tracing
787c746
< @x [20] m.289 l.6170 - e-TeX protected
---
> @x [20] m.289 l.6155 - e-TeX protected
794c753
< @x [20] m.294 l.6295 - e-TeX protected
---
> @x [20] m.294 l.6280 - e-TeX protected
800c759
< @x [20] m.296 l.6316 print_meaning - e-TeX marks
---
> @x [20] m.296 l.6301 print_meaning - e-TeX marks
806c765
< @x [21] m.298 l.6390 print_cmd_chr - e-TeX protected
---
> @x [21] m.298 l.6375 print_cmd_chr - e-TeX protected
813c772
< @x [21] m.299 l.6409 show_cur_cmd_chr - e-TeX tracing
---
> @x [21] m.299 l.6394 show_cur_cmd_chr - e-TeX tracing
822c781
< @x [21] m.299 l.6414 show_cur_cmd_chr - e-TeX tracing
---
> @x [21] m.299 l.6399 show_cur_cmd_chr - e-TeX tracing
844c803
< @x [22] m.303 l.6490 show_context - e-TeX scan_tokens
---
> @x [22] m.303 l.6475 show_context - e-TeX scan_tokens
852,863c811,812
< @x [22] m.307 l.6687 - e-TeX basic, every_eof
< only if |token_type>=macro|.
< @^reference counts@>
< @y
< only if |token_type>=macro|.
< @^reference counts@>
< 
< Since \eTeX's additional token list parameters precede |toks_base|, the
< corresponding token types must precede |write_text|.
< @z
< %---------------------------------------
< @x [22] m.307 l.6708 - e-TeX basic
---
> @x [22] m.307 l.6692 - e-TeX basic
> @d mark_text=14 {|token_type| code for \.{\\topmark}, etc.}
866,871c815,817
< @#
< @d eTeX_text_offset=output_routine_loc-output_text
< @d every_eof_text=every_eof_loc-eTeX_text_offset
<   {|token_type| code for \.{\\everyeof}}
< @#
< @d write_text=toks_base-eTeX_text_offset {|token_type| code for \.{\\write}}
---
> @d every_eof_text=14 {|token_type| code for \.{\\everyeof}}
> @d mark_text=15 {|token_type| code for \.{\\topmark}, etc.}
> @d write_text=16 {|token_type| code for \.{\\write}}
874c820
< @x [22] m.311 l.6764 show_context - e-TeX scan_tokens
---
> @x [22] m.311 l.6749 show_context - e-TeX scan_tokens
880c826
< @x [22] m.313 l.6809 - e-TeX scan_tokens
---
> @x [22] m.313 l.6794 - e-TeX scan_tokens
883,885c829,832
< else  begin print_nl("l.");
<   if index=in_open then print_int(line)
<   else print_int(line_stack[index+1]); {input from a pseudo file}
---
> else if index<>in_open then {input from a pseudo file}
>   begin print_nl("l."); print_int(line_stack[index+1]);
>   end
> else  begin print_nl("l."); print_int(line);
888,889c835,836
< @x [22] m.314 l.6831 - e-TeX basic
< write_text: print_nl("<write> ");
---
> @x [22] m.314 l.6814 - e-TeX basic
> every_cr_text: print_nl("<everycr> ");
890a838
> every_cr_text: print_nl("<everycr> ");
892d839
< write_text: print_nl("<write> ");
895c842
< @x [23] m.326 l.7024 - e-TeX optimized \aftergroup
---
> @x [23] m.326 l.7009 - e-TeX optimized \aftergroup
910c857
< @x [23] m.328 l.7052 begin_file_reading - e-TeX every_eof, tracing_nesting
---
> @x [23] m.328 l.7037 begin_file_reading - e-TeX every_eof, tracing_nesting
918c865
< @x [23] m.329 l.7062 end_file_reading - e-TeX scan_tokens
---
> @x [23] m.329 l.7047 end_file_reading - e-TeX scan_tokens
925c872
< @x [23] m.331 l.7081 - e-TeX tracing_nesting
---
> @x [23] m.331 l.7066 - e-TeX tracing_nesting
932c879
< @x [24] m.362 l.7553 - e-TeX scan_tokens, every_eof
---
> @x [24] m.362 l.7538 - e-TeX scan_tokens, every_eof
948c895
< @x [24] m.362 l.7556 - e-TeX every_eof
---
> @x [24] m.362 l.7541 - e-TeX every_eof
958c905
< @x [24] m.362 l.7559 - e-TeX scan_tokens
---
> @x [24] m.362 l.7544 - e-TeX scan_tokens
972c919
< @x [25] m.366 l.7643 - e-TeX basic
---
> @x [25] m.366 l.7630 - e-TeX basic
979c926
< @x [25] m.366 l.7650 expand - e-TeX cond
---
> @x [25] m.366 l.7637 expand - e-TeX cond
986c933
< @x [25] m.366 l.7661 expand - e-TeX cond
---
> @x [25] m.366 l.7648 expand - e-TeX cond
993c940
< @x [25] m.367 l.7672 - e-TeX cond
---
> @x [25] m.367 l.7659 - e-TeX cond
1000c947
< @x [25] m.377 l.7792 - e-TeX scan_tokens
---
> @x [25] m.377 l.7779 - e-TeX scan_tokens
1008c955
< @x [25] m.378 l.7795 - e-TeX scan_tokens
---
> @x [25] m.378 l.7782 - e-TeX scan_tokens
1015c962
< @x [25] m.382 l.7851 - e-TeX marks
---
> @x [25] m.382 l.7838 - e-TeX marks
1023c970
< @x [25] m.385 l.7883 - e-TeX marks
---
> @x [25] m.385 l.7870 - e-TeX marks
1029c976
< @x [25] m.385 l.7889 - e-TeX marks
---
> @x [25] m.385 l.7876 - e-TeX marks
1037c984
< @x [25] m.386 l.7895 - e-TeX marks
---
> @x [25] m.386 l.7882 - e-TeX marks
1048c995
< @x [25] m.389 l.7958 macro_call - e-TeX protected
---
> @x [25] m.389 l.7945 macro_call - e-TeX protected
1055c1002
< @x [26] m.409 l.8270 - e-TeX basic
---
> @x [26] m.409 l.8255 - e-TeX basic
1062c1009
< @x [26] m.411 l.8314 - e-TeX sparse arrays
---
> @x [26] m.411 l.8299 - e-TeX sparse arrays
1069c1016
< @x [26] m.411 l.8317 - e-TeX sparse arrays
---
> @x [26] m.411 l.8302 - e-TeX sparse arrays
1087c1034
< @x [26] m.412 l.8327 - e-TeX sparse arrays
---
> @x [26] m.412 l.8312 - e-TeX sparse arrays
1096c1043
< @x [26] m.413 l.8343 scan_something_internal - e-TeX basic
---
> @x [26] m.413 l.8328 scan_something_internal - e-TeX basic
1101,1102c1048
< @!q,@!r:pointer; {general purpose indices}
< @!tx:pointer; {effective tail node}
---
> @!q:halfword; {general purpose index}
1106c1052
< @x [26] m.413 l.8369 scan_something_internal - e-TeX basic
---
> @x [26] m.413 l.8354 scan_something_internal - e-TeX basic
1112c1058
< @x [26] m.415 l.8390 - e-TeX sparse arrays
---
> @x [26] m.415 l.8375 - e-TeX sparse arrays
1130,1132c1076
< @x [26] m.416 l.8405 - e-TeX basic
< |glue_val|, |input_line_no_code|, or |badness_code|.
< @y
---
> @x [26] m.416 l.8390 - e-TeX basic
1134,1138c1078
< \eTeX\ inserts |last_node_type_code| after |glue_val| and adds
< the codes for its extensions: |eTeX_version_code|, \dots\ .
< @z
< %---------------------------------------
< @x [26] m.416 l.8407 - e-TeX basic
---
> 
1141a1082,1084
> |glue_val|, |last_node_type_code|, |input_line_no_code|, |badness_code|,
> |eTeX_version_code|, or one of the other codes for \eTeX\ extensions.
> 
1144,1146c1087,1088
< @d badness_code=input_line_no_code+1 {code for \.{\\badness}}
< @#
< @d eTeX_int=badness_code+1 {first of \eTeX\ codes for integers}
---
> @d badness_code=glue_val+3 {code for \.{\\badness}}
> @d eTeX_int=glue_val+4 {first of \eTeX\ codes for integers}
1153c1095
< @x [26] m.417 l.8440 - e-TeX interaction_mode
---
> @x [26] m.417 l.8425 - e-TeX interaction_mode
1160c1102
< @x [26] m.417 l.8449 - e-TeX basic
---
> @x [26] m.417 l.8434 - e-TeX basic
1167c1109
< @x [26] m.419 l.8469 - e-TeX interaction_mode
---
> @x [26] m.419 l.8457 - e-TeX interaction_mode
1175c1117
< @x [26] m.420 l.8474 - e-TeX sparse arrays
---
> @x [26] m.420 l.8462 - e-TeX sparse arrays
1183c1125
< @x [26] m.423 l.8499 - e-TeX penalties
---
> @x [26] m.423 l.8487 - e-TeX penalties
1190,1198c1132,1133
< @x [26] m.424 l.8504 - e-TeX \lastnodetype
< @ Here is where \.{\\lastpenalty}, \.{\\lastkern}, and \.{\\lastskip} are
< @y
< @ Here is where \.{\\lastpenalty}, \.{\\lastkern}, \.{\\lastskip}, and
< \.{\\lastnodetype} are
< @z
< %---------------------------------------
< @x [26] m.424 l.8508 - e-TeX TeXXeT
< legal in similar contexts.
---
> @x [26] m.424 l.8493 - e-TeX TeXXeT
> implemented. The reference count for \.{\\lastskip} will be updated later.
1200,1221c1135,1136
< legal in similar contexts.
< 
< The macro |find_effective_tail_eTeX| sets |tx| to the last non-\.{\\endM}
< node of the current list.
< @z
< %---------------------------------------
< @x [26] m.424 l.8510 - e-TeX TeXXeT
< @<Fetch an item in the current node...@>=
< @y
< @d find_effective_tail_eTeX==
< tx:=tail;
< if not is_char_node(tx) then
<   if (type(tx)=math_node)and(subtype(tx)=end_M_code) then
<     begin r:=head;
<     repeat q:=r; r:=link(q);
<     until r=tx;
<     tx:=q;
<     end
< @#
< @d find_effective_tail==find_effective_tail_eTeX
< 
< @<Fetch an item in the current node...@>=
---
> implemented. The reference count for \.{\\lastskip} will be updated later.
> A final \.{\\endM} node is temporarily removed.
1224c1139
< @x [26] m.424 l.8511 - e-TeX basic
---
> @x [26] m.424 l.8499 - e-TeX basic
1226,1230d1140
< @y
< if m>=input_line_no_code then
< @z
< %---------------------------------------
< @x [26] m.424 l.8512 - e-TeX basic
1233a1144
> if m>last_node_type_code then
1248c1159
< @x [26] m.424 l.8517 - e-TeX last_node_type
---
> @x [26] m.424 l.8505 - e-TeX last_node_type
1250,1259d1160
<   if not is_char_node(tail)and(mode<>0) then
<     case cur_chr of
<     int_val: if type(tail)=penalty_node then cur_val:=penalty(tail);
<     dimen_val: if type(tail)=kern_node then cur_val:=width(tail);
<     glue_val: if type(tail)=glue_node then
<       begin cur_val:=glue_ptr(tail);
<       if subtype(tail)=mu_glue then cur_val_level:=mu_val;
<       end;
<     end {there are no other cases}
<   else if (mode=vmode)and(tail=head) then
1261d1161
<   find_effective_tail;
1263,1264c1163,1164
<     begin cur_val_level:=int_val;
<     if (tx=head)or(mode=0) then cur_val:=-1;
---
>     begin cur_val:=int_val;
>     if (tail=head)or(mode=0) then cur_val:=-1;
1267c1167,1173
<   if not is_char_node(tx)and(mode<>0) then
---
> @z
> %---------------------------------------
> @x [26] m.424 l.8507 - e-TeX TeXXeT
>     case cur_chr of
> @y
>     begin if (type(tail)=math_node)and(subtype(tail)=end_M_code) then
>       remove_end_M;
1269,1273c1175,1179
<     int_val: if type(tx)=penalty_node then cur_val:=penalty(tx);
<     dimen_val: if type(tx)=kern_node then cur_val:=width(tx);
<     glue_val: if type(tx)=glue_node then
<       begin cur_val:=glue_ptr(tx);
<       if subtype(tx)=mu_glue then cur_val_level:=mu_val;
---
> @z
> %---------------------------------------
> @x [26] m.424 l.8513 - e-TeX last_node_type
>       end;
> @y
1275,1276c1181,1187
<     last_node_type_code: if type(tx)<=unset_node then cur_val:=type(tx)+1
<       else cur_val:=unset_node+2;
---
>     last_node_type_code:
>       if (type(tail)<>math_node)or(subtype(tail)<>end_M_code) then
>         if type(tail)<=unset_node then cur_val:=type(tail)+1
>         else cur_val:=unset_node+2;
> @z
> %---------------------------------------
> @x [26] m.424 l.8514 - e-TeX TeXXeT
1278c1189,1192
<   else if (mode=vmode)and(tx=head) then
---
> @y
>     end; {there are no other cases}
>     if LR_temp<>null then insert_end_M;
>     end
1281c1195
< @x [26] m.424 l.8531 - e-TeX last_node_type
---
> @x [26] m.424 l.8519 - e-TeX last_node_type
1288c1202
< @x [26] m.427 l.8547 - e-TeX sparse arrays
---
> @x [26] m.427 l.8535 - e-TeX sparse arrays
1310c1224
< @x [26] m.427 l.8554 - e-TeX sparse arrays
---
> @x [26] m.427 l.8542 - e-TeX sparse arrays
1316c1230
< @x [26] m.461 l.9082 - e-TeX expr
---
> @x [26] m.461 l.9070 - e-TeX expr
1324c1238
< @x [27] m.464 l.9141 - e-TeX basic
---
> @x [27] m.464 l.9129 - e-TeX basic
1331c1245
< @x [27] m.465 l.9166 the_toks - e-TeX unexpanded
---
> @x [27] m.465 l.9154 the_toks - e-TeX unexpanded
1338c1252
< @x [27] m.465 l.9170 the_toks - e-TeX unexpanded
---
> @x [27] m.465 l.9158 the_toks - e-TeX unexpanded
1346c1260
< @x [27] m.465 l.9184 the_toks - e-TeX unexpanded
---
> @x [27] m.465 l.9172 the_toks - e-TeX unexpanded
1352,1353c1266,1267
< @x [27] m.468 l.9207 - e-TeX basic
< @d number_code=0 {command code for \.{\\number}}
---
> @x [27] m.469 l.9223 - e-TeX basic
>   othercases print_esc("jobname")
1355,1357c1269,1270
< \eTeX\ adds \.{\\eTeXrevision} such that |job_name_code| remains last.
< 
< @d number_code=0 {command code for \.{\\number}}
---
>   @/@<Cases of |convert| for |print_cmd_chr|@>@/
>   othercases print_esc("jobname")
1360,1361c1273,1274
< @x [27] m.468 l.9212 - e-TeX basic
< @d job_name_code=5 {command code for \.{\\jobname}}
---
> @x [27] m.470 l.9232 conv_toks - e-TeX basic
> @!c:number_code..job_name_code; {desired type of conversion}
1363,1366c1276
< @d etex_convert_base=5 {base for \eTeX's command codes}
< @d eTeX_revision_code=etex_convert_base {command code for \.{\\eTeXrevision}}
< @d etex_convert_codes=etex_convert_base+1 {end of \eTeX's command codes}
< @d job_name_code=etex_convert_codes {command code for \.{\\jobname}}
---
> @!c:small_number; {desired type of conversion}
1369,1370c1279,1280
< @x [27] m.469 l.9235 - e-TeX basic
<   othercases print_esc("jobname")
---
> @x [27] m.471 l.9249 - e-TeX basic
> end {there are no other cases}
1372,1373c1282,1283
<   eTeX_revision_code: print_esc("eTeXrevision");
<   othercases print_esc("jobname")
---
> @/@<Cases of `Scan the argument for command |c|'@>@/
> end {there are no other cases}
1376,1377c1286,1287
< @x [27] m.471 l.9260 - e-TeX basic
< job_name_code: if job_name=0 then open_log_file;
---
> @x [27] m.472 l.9265 - e-TeX basic
> end {there are no other cases}
1379,1380c1289,1290
< eTeX_revision_code: do_nothing;
< job_name_code: if job_name=0 then open_log_file;
---
> @/@<Cases of `Print the result of command |c|'@>@/
> end {there are no other cases}
1383,1390c1293
< @x [27] m.472 l.9276 - e-TeX basic
< job_name_code: print(job_name);
< @y
< eTeX_revision_code: print(eTeX_revision);
< job_name_code: print(job_name);
< @z
< %---------------------------------------
< @x [27] m.478 l.9386 - e-TeX protected
---
> @x [27] m.478 l.9374 - e-TeX protected
1400c1303
< @x [27] m.482 l.9434 read_toks - e-TeX read_line
---
> @x [27] m.482 l.9422 read_toks - e-TeX read_line
1406c1309
< @x [27] m.483 l.9460 - e-TeX read_line
---
> @x [27] m.483 l.9448 - e-TeX read_line
1413c1316
< @x [28] m.487 l.9512 - e-TeX cond
---
> @x [28] m.487 l.9500 - e-TeX cond
1421c1324
< @x [28] m.488 l.9567 - e-TeX cond
---
> @x [28] m.488 l.9555 - e-TeX cond
1428c1331
< @x [28] m.488 l.9584 - e-TeX cond
---
> @x [28] m.488 l.9572 - e-TeX cond
1438c1341
< @x [28] m.494 l.9658 pass_text - e-TeX tracing
---
> @x [28] m.494 l.9646 pass_text - e-TeX tracing
1445c1348
< @x [28] m.496 l.9674 - e-TeX tracing_nesting
---
> @x [28] m.496 l.9662 - e-TeX tracing_nesting
1453c1356
< @x [28] m.498 l.9711 conditional - e-TeX cond
---
> @x [28] m.498 l.9699 conditional - e-TeX cond
1465c1368
< @x [28] m.501 l.9754 - e-TeX cond
---
> @x [28] m.501 l.9742 - e-TeX cond
1472c1375
< @x [28] m.505 l.9793 - e-TeX sparse arrays
---
> @x [28] m.505 l.9781 - e-TeX sparse arrays
1478c1381
< @x [28] m.510 l.9883 - e-TeX cond
---
> @x [28] m.510 l.9871 - e-TeX cond
1485c1388
< @x [28] m.510 l.9894 - e-TeX cond
---
> @x [28] m.510 l.9882 - e-TeX cond
1492,1493c1395,1402
< @x [29] m.536 l.10348 - e-TeX basic
< print_two(time div 60); print_char(":"); print_two(time mod 60);
---
> @x [29] m.536 l.10324 - e-TeX basic
> begin wlog(banner);
> @y
> begin wlog(eTeX_banner);
> @z
> %---------------------------------------
> @x [29] m.536 l.10331 - e-TeX basic
> end
1495d1403
< print_two(time div 60); print_char(":"); print_two(time mod 60);
1498a1407
> end
1501c1410
< @x [30] m.581 l.11282 char_warning - e-TeX tracing
---
> @x [30] m.581 l.11263 char_warning - e-TeX tracing
1510c1419
< @x [30] m.581 l.11289 char_warning - e-TeX tracing
---
> @x [30] m.581 l.11270 char_warning - e-TeX tracing
1518c1427
< @x [32] m.616 l.12257 - e-TeX TeXXeT
---
> @x [32] m.616 l.12238 - e-TeX TeXXeT
1541c1450
< @x [32] m.616 l.12259 - e-TeX TeXXeT
---
> @x [32] m.616 l.12240 - e-TeX TeXXeT
1544,1549c1453,1455
< @d reversed=1 {subtype for an |hlist_node| whose hlist has been reversed}
< @d dlist=2 {subtype for an |hlist_node| from display math mode}
< @d box_lr(#) == (qo(subtype(#))) {direction mode of a box}
< @d set_box_lr(#) ==  subtype(#):=set_box_lr_end
< @d set_box_lr_end(#) == qi(#)
< @#
---
> @d reversed=min_quarterword+1 {subtype for an |hlist_node| whose hlist
>   has been reversed}
> @d dlist=min_quarterword+2 {subtype for an |hlist_node| from display math mode}
1557c1463,1468
< @x [32] m.619 l.12327 hlist_out - e-TeX TeXXeT
---
> @x [32] m.619 l.12300 hlist_out - e-TeX add_glue
> @!g_order: glue_ord; {applicable order of infinity for glue}
> @y
> @z
> %---------------------------------------
> @x [32] m.619 l.12308 hlist_out - e-TeX TeXXeT
1564c1475,1482
< @x [32] m.619 l.12337 hlist_out - e-TeX TeXXeT
---
> @x [32] m.619 l.12309 hlist_out - e-TeX add_glue
> @!glue_temp:real; {glue value before rounding}
> begin this_box:=temp_ptr; g_order:=glue_order(this_box);
> @y
> begin this_box:=temp_ptr;
> @z
> %---------------------------------------
> @x [32] m.619 l.12315 hlist_out - e-TeX TeXXeT
1569c1487,1496
< @<Initialize |hlist_out| for mixed direction typesetting@>;
---
> if eTeX_ex then
>   begin @<Initialize the LR stack@>;
>   if subtype(this_box)=dlist then
>     if cur_dir=right_to_left then
>       begin cur_dir:=left_to_right; cur_h:=cur_h-width(this_box);
>       end
>     else subtype(this_box):=min_quarterword;
>   if (cur_dir=right_to_left)and(subtype(this_box)<>reversed) then
>     @<Reverse the complete hlist and set the subtype to |reversed|@>;
>   end;
1573c1500
< @x [32] m.619 l.12340 hlist_out - e-TeX TeXXeT
---
> @x [32] m.619 l.12318 hlist_out - e-TeX TeXXeT
1576c1503,1506
< @<Finish |hlist_out| for mixed direction typesetting@>;
---
> if eTeX_ex then
>   begin @<Check for LR anomalies at the end of |hlist_out|@>;
>   if subtype(this_box)=dlist then cur_dir:=right_to_left;
>   end;
1580c1510
< @x [32] m.620 l.12359 - e-TeX TeXXeT
---
> @x [32] m.620 l.12337 - e-TeX TeXXeT
1587c1517
< @x [32] m.622 l.12384 - e-TeX TeXXeT
---
> @x [32] m.622 l.12362 - e-TeX TeXXeT
1591c1521,1525
< math_node: @<Handle a math node in |hlist_out|@>;
---
> math_node:begin if eTeX_ex then
>     @<Adjust \(t)the LR stack for the |hlist_out| routine; if necessary
>       reverse an hlist segment and |goto reswitch|@>;
>   cur_h:=cur_h+width(p);
>   end;
1594c1528
< @x [32] m.622 l.12386 - e-TeX TeXXeT
---
> @x [32] m.622 l.12364 - e-TeX TeXXeT
1601c1535
< @x [32] m.622 l.12391 - e-TeX TeXXeT
---
> @x [32] m.622 l.12369 - e-TeX TeXXeT
1607c1541
< @x [32] m.623 l.12398 - e-TeX TeXXeT
---
> @x [32] m.623 l.12376 - e-TeX TeXXeT
1614c1548
< @x [32] m.623 l.12401 - e-TeX TeXXeT
---
> @x [32] m.623 l.12379 - e-TeX TeXXeT
1620,1632c1554,1566
< @x [32] m.625 l.12419 - e-TeX TeXXeT
<            glue_temp:=-billion
< 
< @<Move right or output leaders@>=
< begin g:=glue_ptr(p); rule_wd:=width(g)-cur_g;
< @y
<            glue_temp:=-billion
< @#
< @d round_glue==g:=glue_ptr(p); rule_wd:=width(g)-cur_g;
< @z
< %---------------------------------------
< @x [32] m.625 l.12438 - e-TeX TeXXeT
< rule_wd:=rule_wd+cur_g;
---
> @x [32] m.625 l.12401 - e-TeX add_glue
>   begin if g_sign=stretching then
>     begin if stretch_order(g)=g_order then
>       begin vet_glue(float(glue_set(this_box))*stretch(g));
> @^real multiplication@>
>       rule_wd:=rule_wd+round(glue_temp);
>       end;
>     end
>   else if shrink_order(g)=g_order then
>     begin vet_glue(float(glue_set(this_box))*shrink(g));
>       rule_wd:=rule_wd-round(glue_temp);
>     end;
>   end;
1634,1638c1568
< rule_wd:=rule_wd+cur_g
< 
< @<Move right or output leaders@>=
< begin round_glue;
< if eTeX_ex then @<Handle a glue node for mixed direction typesetting@>;
---
>   add_glue(rule_wd);
1641c1571
< @x [32] m.626 l.12454 - e-TeX TeXXeT
---
> @x [32] m.626 l.12428 - e-TeX TeXXeT
1648c1578
< @x [32] m.626 l.12460 - e-TeX TeXXeT
---
> @x [32] m.626 l.12434 - e-TeX TeXXeT
1656c1586
< @x [32] m.628 l.12499 - e-TeX TeXXeT
---
> @x [32] m.628 l.12473 - e-TeX TeXXeT
1663c1593,1605
< @x [32] m.632 l.12573 - e-TeX TeXXeT
---
> @x [32] m.629 l.12489 vlist_out - e-TeX add_glue
> @!g_order: glue_ord; {applicable order of infinity for glue}
> @y
> @z
> %---------------------------------------
> @x [32] m.629 l.12498 vlist_out - e-TeX add_glue
> @!glue_temp:real; {glue value before rounding}
> begin this_box:=temp_ptr; g_order:=glue_order(this_box);
> @y
> begin this_box:=temp_ptr;
> @z
> %---------------------------------------
> @x [32] m.632 l.12544 - e-TeX TeXXeT
1670c1612
< @x [32] m.633 l.12585 - e-TeX TeXXeT
---
> @x [32] m.633 l.12556 - e-TeX TeXXeT
1680c1622,1639
< @x [32] m.637 l.12651 - e-TeX TeXXeT
---
> @x [32] m.634 l.12564 - e-TeX add_glue
>   begin if g_sign=stretching then
>     begin if stretch_order(g)=g_order then
>       begin vet_glue(float(glue_set(this_box))*stretch(g));
> @^real multiplication@>
>       rule_ht:=rule_ht+round(glue_temp);
>       end;
>     end
>   else if shrink_order(g)=g_order then
>     begin vet_glue(float(glue_set(this_box))*shrink(g));
>     rule_ht:=rule_ht-round(glue_temp);
>     end;
>   end;
> @y
>   add_glue(rule_ht);
> @z
> %---------------------------------------
> @x [32] m.637 l.12619 - e-TeX TeXXeT
1689c1648
< @x [32] m.638 l.12688 ship_out - e-TeX TeXXeT
---
> @x [32] m.638 l.12656 ship_out - e-TeX TeXXeT
1696c1655
< @x [33] m.649 l.12909 hpack - e-TeX TeXXeT
---
> @x [33] m.649 l.12876 hpack - e-TeX TeXXeT
1703c1662
< @x [33] m.649 l.12919 hpack - e-TeX TeXXeT
---
> @x [33] m.649 l.12886 hpack - e-TeX TeXXeT
1710c1669
< @x [33] m.651 l.12943 - e-TeX TeXXeT
---
> @x [33] m.651 l.12910 - e-TeX TeXXeT
1719c1678
< @x [34] m.687 l.13514 - e-TeX middle
---
> @x [34] m.687 l.13480 - e-TeX middle
1726c1685
< @x [34] m.687 l.13531 - e-TeX middle
---
> @x [34] m.687 l.13497 - e-TeX middle
1733,1734c1692,1693
< @x [34] m.696 l.13704 - e-TeX middle
< right_noad: begin print_esc("right"); print_delimiter(delimiter(p));
---
> @x [34] m.696 l.13670 - e-TeX middle
> right_noad: begin print_esc("right"); print_delimiter(nucleus(p));
1744c1703
<   print_delimiter(delimiter(p));
---
>   print_delimiter(nucleus(p));
1755c1714
< @x [36] m.727 l.14302 - e-TeX middle
---
> @x [36] m.727 l.14268 - e-TeX middle
1764c1723
< @x [36] m.760 l.14963 - e-TeX middle
---
> @x [36] m.760 l.14929 - e-TeX middle
1771c1730
< @x [36] m.762 l.15004 make_left_right - e-TeX middle
---
> @x [36] m.762 l.14970 make_left_right - e-TeX middle
1778c1737
< @x [37] m.785 l.15495 align_peek - e-TeX protected
---
> @x [37] m.785 l.15461 align_peek - e-TeX protected
1786c1745
< @x [37] m.791 l.15606 fin_col - e-TeX protected
---
> @x [37] m.791 l.15572 fin_col - e-TeX protected
1794c1753
< @x [37] m.807 l.15868 - e-TeX TeXXeT
---
> @x [37] m.807 l.15834 - e-TeX TeXXeT
1798c1757
<   if nest[nest_ptr-1].mode_field=mmode then set_box_lr(q)(dlist); {for |ship_out|}
---
>   if nest[nest_ptr-1].mode_field=mmode then subtype(q):=dlist; {for |ship_out|}
1801c1760
< @x [37] m.808 l.15886 - e-TeX TeXXeT
---
> @x [37] m.808 l.15852 - e-TeX TeXXeT
1805c1764
< set_box_lr(r)(0); {for |ship_out|}
---
> subtype(r):=min_quarterword; {for |ship_out|}
1808c1767
< @x [38] m.814 l.16009 - e-TeX penalties
---
> @x [38] m.814 l.15975 - e-TeX penalties
1818c1777
< @x [38] m.815 l.16036 line_break - e-TeX penalties
---
> @x [38] m.815 l.16002 line_break - e-TeX penalties
1824c1783
< @x [38] m.815 l.16046 - e-TeX basic
---
> @x [38] m.815 l.16012 - e-TeX basic
1832c1791
< @x [38] m.816 l.16066 - e-TeX last_line_fit
---
> @x [38] m.816 l.16032 - e-TeX last_line_fit
1839c1798
< @x [38] m.819 l.16131 - e-TeX last_line_fit
---
> @x [38] m.819 l.16097 - e-TeX last_line_fit
1845c1804
< @x [38] m.827 l.16294 - e-TeX last_line_fit
---
> @x [38] m.827 l.16260 - e-TeX last_line_fit
1852c1811
< @x [38] m.829 l.16345 try_break - e-TeX last_line_fit
---
> @x [38] m.829 l.16311 try_break - e-TeX last_line_fit
1858c1817
< @x [38] m.845 l.16637 - e-TeX last_line_fit
---
> @x [38] m.845 l.16603 - e-TeX last_line_fit
1866c1825
< @x [38] m.846 l.16650 - e-TeX last_line_fit
---
> @x [38] m.846 l.16616 - e-TeX last_line_fit
1873c1832
< @x [38] m.851 l.16749 - e-TeX last_line_fit
---
> @x [38] m.851 l.16715 - e-TeX last_line_fit
1881c1840
< @x [38] m.852 l.16773 - e-TeX last_line_fit
---
> @x [38] m.852 l.16739 - e-TeX last_line_fit
1892c1851
< @x [38] m.855 l.16830 - e-TeX last_line_fit
---
> @x [38] m.855 l.16796 - e-TeX last_line_fit
1900c1859
< @x [39] m.863 l.17003 - e-TeX last_line_fit
---
> @x [39] m.863 l.16969 - e-TeX last_line_fit
1907c1866
< @x [39] m.864 l.17014 - e-TeX last_line_fit
---
> @x [39] m.864 l.16980 - e-TeX last_line_fit
1915c1874
< @x [39] m.866 l.17064 - e-TeX TeXXeT
---
> @x [39] m.866 l.17030 - e-TeX TeXXeT
1918c1877
< math_node: begin if subtype(cur_p)<L_code then auto_breaking:=odd(subtype(cur_p));
---
> math_node: begin if subtype(cur_p)<L_code then auto_breaking:=end_LR(cur_p);
1922c1881
< @x [39] m.876 l.17226 - e-TeX penalties
---
> @x [39] m.876 l.17192 - e-TeX penalties
1928c1887
< @x [39] m.877 l.17240 post_line_break - e-TeX penalties
---
> @x [39] m.877 l.17206 post_line_break - e-TeX penalties
1934c1893
< @x [39] m.877 l.17250 post_line_break - e-TeX TeXXeT
---
> @x [39] m.877 l.17216 post_line_break - e-TeX TeXXeT
1942c1901
< @x [39] m.877 l.17263 post_line_break - e-TeX TeXXeT
---
> @x [39] m.877 l.17229 post_line_break - e-TeX TeXXeT
1949c1908
< @x [39] m.879 l.17293 - e-TeX TeXXeT
---
> @x [39] m.879 l.17259 - e-TeX TeXXeT
1957c1916
< @x [39] m.880 l.17310 - e-TeX TeXXeT
---
> @x [39] m.880 l.17276 - e-TeX TeXXeT
1969c1928
< @x [39] m.881 l.17333 - e-TeX TeXXeT
---
> @x [39] m.881 l.17299 - e-TeX TeXXeT
1979c1938
< @x [39] m.890 l.17427 - e-TeX penalties
---
> @x [39] m.890 l.17395 - e-TeX penalties
2010,2017c1969
< @x [40] m.891 l.17455 - e-TeX TeXXeT
< implicit kern nodes, and $p_m$ is a glue or penalty or insertion or adjust
< @y
< implicit kern or text direction nodes, and $p_m$ is a glue or penalty or
< insertion or adjust
< @z
< %---------------------------------------
< @x [40] m.891 l.17494 - e-TeX hyph_codes
---
> @x [40] m.891 l.17460 - e-TeX hyph_codes
2024,2031c1976
< @x [40] m.896 l.17557 - e-TeX TeXXeT
<   else if (type(s)=kern_node)and(subtype(s)=normal) then goto continue
< @y
<   else if (type(s)=kern_node)and(subtype(s)=normal) then goto continue
<   else if (type(s)=math_node)and(subtype(s)>=L_code) then goto continue
< @z
< %---------------------------------------
< @x [40] m.896 l.17563 - e-TeX hyph_codes
---
> @x [40] m.896 l.17529 - e-TeX hyph_codes
2040c1985
< @x [40] m.897 l.17580 - e-TeX hyph_codes
---
> @x [40] m.897 l.17546 - e-TeX hyph_codes
2051c1996
< @x [40] m.898 l.17606 - e-TeX hyph_codes
---
> @x [40] m.898 l.17572 - e-TeX hyph_codes
2062,2069c2007
< @x [40] m.899 l.17623 - e-TeX TeXXeT
<     othercases goto done1
< @y
<     math_node: if subtype(s)>=L_code then goto done4@+else goto done1;
<     othercases goto done1
< @z
< %---------------------------------------
< @x [42] m.934 l.18245 new_hyph_exceptions - e-TeX hyph_codes
---
> @x [42] m.934 l.18211 new_hyph_exceptions - e-TeX hyph_codes
2075c2013
< @x [42] m.934 l.18255 new_hyph_exceptions - e-TeX hyph_codes
---
> @x [42] m.934 l.18221 new_hyph_exceptions - e-TeX hyph_codes
2087c2025
< @x [42] m.937 l.18287 - e-TeX hyph_codes
---
> @x [42] m.937 l.18253 - e-TeX hyph_codes
2094c2032
< @x [42] m.937 l.18295 - e-TeX hyph_codes
---
> @x [42] m.937 l.18261 - e-TeX hyph_codes
2100c2038
< @x [43] m.952 l.18583 - e-TeX hyph_codes
---
> @x [43] m.952 l.18549 - e-TeX hyph_codes
2107c2045
< @x [43] m.958 l.18671 - e-TeX hyph_codes
---
> @x [43] m.958 l.18637 - e-TeX hyph_codes
2113c2051
< @x [43] m.958 l.18675 - e-TeX hyph_codes
---
> @x [43] m.958 l.18641 - e-TeX hyph_codes
2120c2058
< @x [43] m.960 l.18718 new_patterns - e-TeX hyph_codes
---
> @x [43] m.960 l.18684 new_patterns - e-TeX hyph_codes
2128c2066
< @x [43] m.966 l.18825 init_trie - e-TeX hyph_codes
---
> @x [43] m.966 l.18791 init_trie - e-TeX hyph_codes
2135c2073
< @x [44] m.968 l.18841 - e-TeX saved_items
---
> @x [44] m.968 l.18807 - e-TeX saved_items
2144c2082
< @x [44] m.968 l.18848 prune_page_top - e-TeX saved_items
---
> @x [44] m.968 l.18814 prune_page_top - e-TeX saved_items
2155c2093
< @x [44] m.968 l.18859 prune_page_top - e-TeX saved_items
---
> @x [44] m.968 l.18825 prune_page_top - e-TeX saved_items
2166c2104
< @x [44] m.977 l.19026 vsplit - e-TeX marks, sparse arrays
---
> @x [44] m.977 l.18992 vsplit - e-TeX marks, sparse arrays
2173c2111
< @x [44] m.977 l.19032 vsplit - e-TeX sparse arrays
---
> @x [44] m.977 l.18998 vsplit - e-TeX sparse arrays
2179c2117
< @x [44] m.977 l.19033 vsplit - e-TeX marks, saved_items
---
> @x [44] m.977 l.18999 vsplit - e-TeX marks, saved_items
2188c2126
< @x [44] m.977 l.19041 vsplit - e-TeX saved_items
---
> @x [44] m.977 l.19007 vsplit - e-TeX saved_items
2195c2133
< @x [44] m.977 l.19042 vsplit - e-TeX sparse arrays
---
> @x [44] m.977 l.19008 vsplit - e-TeX sparse arrays
2203c2141
< @x [44] m.979 l.19067 - e-TeX marks
---
> @x [44] m.979 l.19033 - e-TeX marks
2210c2148
< @x [45] m.982 l.19201 - e-TeX last_node_type
---
> @x [45] m.982 l.19167 - e-TeX last_node_type
2217c2155
< @x [45] m.982 l.19214 - e-TeX last_node_type
---
> @x [45] m.982 l.19180 - e-TeX last_node_type
2224c2162
< @x [45] m.991 l.19353 - e-TeX last_node_type
---
> @x [45] m.991 l.19317 - e-TeX last_node_type
2231c2169
< @x [45] m.996 l.19420 - e-TeX last_node_type
---
> @x [45] m.996 l.19384 - e-TeX last_node_type
2238c2176
< @x [45] m.999 l.19454 - e-TeX saved_items
---
> @x [45] m.999 l.19421 - e-TeX saved_items
2249c2187
< @x [45] m.1012 l.19697 fire_up - e-TeX marks
---
> @x [45] m.1012 l.19661 fire_up - e-TeX marks
2257c2195
< @x [45] m.1012 l.19705 fire_up - e-TeX marks
---
> @x [45] m.1012 l.19669 fire_up - e-TeX marks
2265c2203
< @x [45] m.1014 l.19742 - e-TeX marks
---
> @x [45] m.1014 l.19706 - e-TeX marks
2273c2211
< @x [45] m.1021 l.19854 - e-TeX saved_items
---
> @x [45] m.1021 l.19818 - e-TeX saved_items
2279c2217
< @x [45] m.1023 l.19890 - e-TeX saved_items
---
> @x [45] m.1023 l.19854 - e-TeX saved_items
2286c2224
< @x [45] m.1026 l.19932 - e-TeX saved_items
---
> @x [45] m.1026 l.19896 - e-TeX saved_items
2293c2231
< @x [47] m.1070 l.20735 normal_paragraph - e-TeX penalties
---
> @x [47] m.1070 l.20697 normal_paragraph - e-TeX penalties
2301c2239
< @x [47] m.1071 l.20756 - e-TeX sparse arrays
---
> @x [47] m.1071 l.20718 - e-TeX sparse arrays
2315c2253
< @x [47] m.1071 l.20770 - e-TeX sparse arrays
---
> @x [47] m.1071 l.20732 - e-TeX sparse arrays
2324c2262
< @x [47] m.1075 l.20853 box_end - e-TeX sparse arrays
---
> @x [47] m.1075 l.20815 box_end - e-TeX sparse arrays
2331c2269
< @x [47] m.1077 l.20891 - e-TeX sparse arrays
---
> @x [47] m.1077 l.20853 - e-TeX sparse arrays
2346,2355c2284
< @x [47] m.1079 l.20920 begin_box - e-TeX TeXXeT
< @!m:quarterword; {the length of a replacement list}
< @y
< @!r:pointer; {running behind |p|}
< @!fm:boolean; {a final \.{\\beginM} \.{\\endM} node pair?}
< @!tx:pointer; {effective tail node}
< @!m:quarterword; {the length of a replacement list}
< @z
< %---------------------------------------
< @x [47] m.1079 l.20922 begin_box - e-TeX sparse arrays
---
> @x [47] m.1079 l.20885 begin_box - e-TeX sparse arrays
2371,2372c2300,2301
< @x [47] m.1080 l.20940 - e-TeX TeXXeT
< @<If the current list ends with a box node, delete it...@>=
---
> @x [47] m.1080 l.20901 - e-TeX TeXXeT
> since |head| is a one-word node.
2374,2396c2303,2304
< @d fetch_effective_tail_eTeX(#)== {extract |tx|,
<   drop \.{\\beginM} \.{\\endM} pair}
< q:=head; p:=null;
< repeat r:=p; p:=q; fm:=false;
< if not is_char_node(q) then
<   if type(q)=disc_node then
<     begin for m:=1 to replace_count(q) do p:=link(p);
<     if p=tx then #;
<     end
<   else if (type(q)=math_node)and(subtype(q)=begin_M_code) then fm:=true;
< q:=link(p);
< until q=tx; {found |r|$\to$|p|$\to$|q=tx|}
< q:=link(tx); link(p):=q; link(tx):=null;
< if q=null then if fm then confusion("tail1")
< @:this can't happen tail1}{\quad tail1@>
<   else tail:=p
< else if fm then {|r|$\to$|p=begin_M|$\to$|q=end_M|}
<   begin tail:=r; link(r):=null; flush_node_list(p);@+end
< @#
< @d check_effective_tail(#)==find_effective_tail_eTeX
< @d fetch_effective_tail==fetch_effective_tail_eTeX
< 
< @<If the current list ends with a box node, delete it...@>=
---
> since |head| is a one-word node.
> A final \.{\\endM} node is temporarily removed.
2399,2400c2307
< @x [47] m.1080 l.20950 - e-TeX TeXXeT
< else  begin if not is_char_node(tail) then
---
> @x [47] m.1080 l.20914 - e-TeX TeXXeT
2403d2309
<   end;
2405,2407c2311,2313
< else  begin check_effective_tail(goto done);
<   if not is_char_node(tx) then
<     if (type(tx)=hlist_node)or(type(tx)=vlist_node) then
---
>     begin if (type(tail)=math_node)and(subtype(tail)=end_M_code) then
>       remove_end_M;
>     if (type(tail)=hlist_node)or(type(tail)=vlist_node) then
2409,2427c2315,2316
<   done:end;
< @z
< %---------------------------------------
< @x [47] m.1081 l.20957 - e-TeX TeXXeT
< begin q:=head;
< repeat p:=q;
< if not is_char_node(q) then if type(q)=disc_node then
<   begin for m:=1 to replace_count(q) do p:=link(p);
<   if p=tail then goto done;
<   end;
< q:=link(p);
< until q=tail;
< cur_box:=tail; shift_amount(cur_box):=0;
< tail:=p; link(p):=null;
< done:end
< @y
< begin fetch_effective_tail(goto done);
< cur_box:=tx; shift_amount(cur_box):=0;
< end
---
>     if LR_temp<>null then insert_end_M;
>     end;
2430c2319
< @x [47] m.1082 l.20972 - e-TeX sparse arrays
---
> @x [47] m.1082 l.20935 - e-TeX sparse arrays
2436c2325
< @x [47] m.1096 l.21156 - e-TeX penalties, TeXXeT
---
> @x [47] m.1096 l.21119 - e-TeX penalties, TeXXeT
2445c2334
< @x [47] m.1101 l.21212 make_mark - e-TeX marks
---
> @x [47] m.1101 l.21175 make_mark - e-TeX marks
2456,2457c2345,2346
< @x [47] m.1105 l.21246 delete_last - e-TeX TeXXeT
< @!m:quarterword; {the length of a replacement list}
---
> @x [47] m.1105 l.21203 - e-TeX TeXXeT
> will be deleted, if present.
2459,2462c2348,2349
< @!r:pointer; {running behind |p|}
< @!fm:boolean; {a final \.{\\beginM} \.{\\endM} node pair?}
< @!tx:pointer; {effective tail node}
< @!m:quarterword; {the length of a replacement list}
---
> will be deleted, if present.
> A final \.{\\endM} node is temporarily removed.
2465c2352
< @x [47] m.1105 l.21250 delete_last - e-TeX TeXXeT
---
> @x [47] m.1105 l.21213 delete_last - e-TeX TeXXeT
2467,2475d2353
<     begin q:=head;
<     repeat p:=q;
<     if not is_char_node(q) then if type(q)=disc_node then
<       begin for m:=1 to replace_count(q) do p:=link(p);
<       if p=tail then return;
<       end;
<     q:=link(p);
<     until q=tail;
<     link(p):=null; flush_node_list(tail); tail:=p;
2477,2480c2355,2366
< else  begin check_effective_tail(return);
<   if not is_char_node(tx) then if type(tx)=cur_chr then
<     begin fetch_effective_tail(return);
<     flush_node_list(tx);
---
> else  begin if not is_char_node(tail) then
>   begin if (type(tail)=math_node)and(subtype(tail)=end_M_code) then
>     remove_end_M;
>   if type(tail)=cur_chr then
> @z
> %---------------------------------------
> @x [47] m.1105 l.21224 delete_last - e-TeX TeXXeT
>   end;
> @y
>   if LR_temp<>null then insert_end_M;
>   end;
>   end;
2483c2369
< @x [47] m.1108 l.21299 - e-TeX saved_items
---
> @x [47] m.1108 l.21262 - e-TeX saved_items
2490c2376
< @x [47] m.1110 l.21309 unpackage - e-TeX saved_items
---
> @x [47] m.1110 l.21272 unpackage - e-TeX saved_items
2496c2382
< @x [47] m.1110 l.21312 unpackage - e-TeX saved_items, sparse arrays
---
> @x [47] m.1110 l.21275 unpackage - e-TeX saved_items, sparse arrays
2503c2389
< @x [47] m.1110 l.21324 unpackage - e-TeX sparse arrays
---
> @x [47] m.1110 l.21287 unpackage - e-TeX sparse arrays
2509c2395
< @x [47] m.1110 l.21327 unpackage - e-TeX saved_items
---
> @x [47] m.1110 l.21290 unpackage - e-TeX saved_items
2516c2402
< @x [47] m.1130 l.21599 - e-TeX TeXXeT
---
> @x [47] m.1130 l.21562 - e-TeX TeXXeT
2523c2409
< @x [48] m.1138 l.21678 init_math - e-TeX TeXXeT
---
> @x [48] m.1138 l.21629 init_math - e-TeX TeXXeT
2536c2422
< @x [48] m.1145 l.21736 - e-TeX TeXXeT, penalties
---
> @x [48] m.1145 l.21687 - e-TeX TeXXeT, penalties
2548c2434
< @x [48] m.1145 l.21749 - e-TeX TeXXeT
---
> @x [48] m.1145 l.21700 - e-TeX TeXXeT
2556c2442
< @x [48] m.1146 l.21757 - e-TeX TeXXeT
---
> @x [48] m.1146 l.21708 - e-TeX TeXXeT
2563c2449
< @x [48] m.1146 l.21772 - e-TeX TeXXeT
---
> @x [48] m.1146 l.21723 - e-TeX TeXXeT
2570c2456
< @x [48] m.1147 l.21783 - e-TeX TeXXeT
---
> @x [48] m.1147 l.21734 - e-TeX TeXXeT
2577c2463
< @x [48] m.1185 l.22292 - e-TeX middle
---
> @x [48] m.1185 l.22243 - e-TeX middle
2589c2475
< @x [48] m.1189 l.22337 - e-TeX middle
---
> @x [48] m.1189 l.22288 - e-TeX middle
2596c2482
< @x [48] m.1191 l.22346 math_left_right - e-TeX middle
---
> @x [48] m.1191 l.22297 math_left_right - e-TeX middle
2605c2491
< @x [48] m.1191 l.22351 math_left_right - e-TeX middle
---
> @x [48] m.1191 l.22302 math_left_right - e-TeX middle
2624c2510
< @x [48] m.1191 l.22357 math_left_right - e-TeX middle
---
> @x [48] m.1191 l.22308 math_left_right - e-TeX middle
2630c2516
< @x [48] m.1192 l.22365 - e-TeX middle
---
> @x [48] m.1192 l.22316 - e-TeX middle
2647c2533
< @x [48] m.1194 l.22380 after_math - e-TeX TeXXeT
---
> @x [48] m.1194 l.22331 after_math - e-TeX TeXXeT
2654c2540
< @x [48] m.1194 l.22387 after_math - e-TeX TeXXeT
---
> @x [48] m.1194 l.22338 after_math - e-TeX TeXXeT
2661c2547
< @x [48] m.1194 l.22394 after_math - e-TeX TeXXeT
---
> @x [48] m.1194 l.22345 after_math - e-TeX TeXXeT
2665c2551
<   set_box_lr(a)(dlist);
---
>   subtype(a):=dlist;
2668c2554
< @x [48] m.1194 l.22397 after_math - e-TeX TeXXeT
---
> @x [48] m.1194 l.22348 after_math - e-TeX TeXXeT
2675c2561
< @x [48] m.1199 l.22484 - e-TeX TeXXeT
---
> @x [48] m.1199 l.22435 - e-TeX TeXXeT
2682c2568
< @x [48] m.1199 l.22499 - e-TeX TeXXeT
---
> @x [48] m.1199 l.22450 - e-TeX TeXXeT
2689c2575
< @x [48] m.1202 l.22541 - e-TeX TeXXeT
---
> @x [48] m.1202 l.22492 - e-TeX TeXXeT
2692c2578
< set_box_lr(b)(dlist);
---
> subtype(b):=dlist;
2696c2582
< @x [48] m.1203 l.22562 - e-TeX TeXXeT
---
> @x [48] m.1203 l.22513 - e-TeX TeXXeT
2702c2588
< @x [48] m.1204 l.22572 - e-TeX TeXXeT
---
> @x [48] m.1204 l.22528 - e-TeX TeXXeT
2708c2594
< @x [48] m.1205 l.22582 - e-TeX TeXXeT
---
> @x [48] m.1205 l.22533 - e-TeX TeXXeT
2715c2601
< @x [48] m.1206 l.22601 - e-TeX TeXXeT
---
> @x [48] m.1206 l.22552 - e-TeX TeXXeT
2722c2608
< @x [49] m.1208 l.22626 - e-TeX protected
---
> @x [49] m.1208 l.22577 - e-TeX protected
2731c2617
< @x [49] m.1209 l.22652 - e-TeX protected
---
> @x [49] m.1209 l.22603 - e-TeX protected
2738c2624
< @x [49] m.1211 l.22714 prefixed_command - e-TeX tracing
---
> @x [49] m.1211 l.22665 prefixed_command - e-TeX tracing
2745,2753c2631
< @x [49] m.1212 l.22730 - e-TeX protected
< help1("I'll pretend you didn't say \long or \outer or \global.");
< @y
< help1("I'll pretend you didn't say \long or \outer or \global.");
< if eTeX_ex then help_line[0]:=@|
<   "I'll pretend you didn't say \long or \outer or \global or \protected.";
< @z
< %---------------------------------------
< @x [49] m.1213 l.22735 - e-TeX protected
---
> @x [49] m.1213 l.22686 - e-TeX protected
2755,2756d2632
<   begin print_err("You can't use `"); print_esc("long"); print("' or `");
<   print_esc("outer"); print("' with `");
2763,2776d2638
<   begin print_err("You can't use `"); print_esc("long"); print("' or `");
<   print_esc("outer");
<   help1("I'll pretend you didn't say \long or \outer here.");
<   if eTeX_ex then
<     begin  help_line[0]:=@|
<       "I'll pretend you didn't say \long or \outer or \protected here.";
<     print("' or `"); print_esc("protected");
<     end;
<   print("' with `");
< @z
< %---------------------------------------
< @x [49] m.1213 l.22740 - e-TeX protected
<   help1("I'll pretend you didn't say \long or \outer here.");
< @y
2779c2641
< @x [49] m.1218 l.22798 - e-TeX protected
---
> @x [49] m.1218 l.22749 - e-TeX protected
2790,2799c2652
< @x [49] m.1221 l.22826 - e-TeX sparse arrays
<   if cur_cmd>=call then add_token_ref(cur_chr);
< @y
<   if cur_cmd>=call then add_token_ref(cur_chr)
<   else if (cur_cmd=register)or(cur_cmd=toks_register) then
<     if (cur_chr<mem_bot)or(cur_chr>lo_mem_stat_max) then
<       add_sa_ref(cur_chr);
< @z
< %---------------------------------------
< @x [49] m.1224 l.22889 - e-TeX sparse arrays
---
> @x [49] m.1224 l.22840 - e-TeX sparse arrays
2813c2666
< @x [49] m.1225 l.22902 - e-TeX read_line
---
> @x [49] m.1225 l.22853 - e-TeX read_line
2819c2672
< @x [49] m.1225 l.22911 - e-TeX read_line
---
> @x [49] m.1225 l.22861 - e-TeX read_line
2825c2678
< @x [49] m.1226 l.22920 - e-TeX sparse arrays
---
> @x [49] m.1226 l.22870 - e-TeX sparse arrays
2845c2698
< @x [49] m.1226 l.22930 - e-TeX sparse arrays
---
> @x [49] m.1226 l.22880 - e-TeX sparse arrays
2855c2708
< @x [49] m.1226 l.22938 - e-TeX sparse arrays
---
> @x [49] m.1226 l.22888 - e-TeX sparse arrays
2861c2714
< @x [49] m.1227 l.22943 - e-TeX sparse arrays
---
> @x [49] m.1227 l.22893 - e-TeX sparse arrays
2884c2737
<     else q:=sa_ptr(cur_chr)
---
>     else q:=sa_ptr(cur_ptr)
2893c2746
< @x [49] m.1236 l.23059 do_register_command - e-TeX sparse arrays
---
> @x [49] m.1236 l.23009 do_register_command - e-TeX sparse arrays
2902c2755
< @x [49] m.1236 l.23076 do_register_command - e-TeX sparse arrays
---
> @x [49] m.1236 l.23024 do_register_command - e-TeX sparse arrays
2910c2763
< @x [49] m.1237 l.23098 - e-TeX sparse arrays
---
> @x [49] m.1237 l.23046 - e-TeX sparse arrays
2923c2776
< @x [49] m.1237 l.23105 - e-TeX sparse arrays
---
> @x [49] m.1237 l.23053 - e-TeX sparse arrays
2933c2786
< @x [49] m.1238 l.23111 - e-TeX sparse arrays
---
> @x [49] m.1238 l.23059 - e-TeX sparse arrays
2939c2792
< @x [49] m.1239 l.23118 - e-TeX sparse arrays
---
> @x [49] m.1239 l.23066 - e-TeX sparse arrays
2945c2798
< @x [49] m.1240 l.23138 - e-TeX sparse arrays
---
> @x [49] m.1240 l.23086 - e-TeX sparse arrays
2957c2810
< @x [49] m.1241 l.23160 - e-TeX sparse arrays
---
> @x [49] m.1241 l.23108 - e-TeX sparse arrays
2969c2822
< @x [49] m.1246 l.23231 alter_integer - e-TeX interaction_mode
---
> @x [49] m.1246 l.23179 alter_integer - e-TeX interaction_mode
2981c2834
< @x [49] m.1247 l.23240 alter_box_dimen - e-TeX sparse arrays
---
> @x [49] m.1247 l.23188 alter_box_dimen - e-TeX sparse arrays
2993c2846
< @x [49] m.1248 l.23249 - e-TeX penalties
---
> @x [49] m.1248 l.23197 - e-TeX penalties
3009c2862
< @x [49] m.1248 l.23259 - e-TeX penalties
---
> @x [49] m.1248 l.23207 - e-TeX penalties
3015,3021c2868
< @x [49] m.1260 l.23346 new_font - e-TeX tracing
< common_ending: equiv(u):=f; eqtb[font_id_base+f]:=eqtb[u]; font_id_text(f):=t;
< @y
< common_ending: define(u,set_font,f); eqtb[font_id_base+f]:=eqtb[u]; font_id_text(f):=t;
< @z
< %---------------------------------------
< @x [49] m.1292 l.23633 - e-TeX show_groups
---
> @x [49] m.1292 l.23581 - e-TeX show_groups
3028c2875
< @x [49] m.1293 l.23640 show_whatever - e-TeX show_ifs
---
> @x [49] m.1293 l.23588 show_whatever - e-TeX show_ifs
3038c2885
< @x [49] m.1293 l.23646 show_whatever - e-TeX show_groups
---
> @x [49] m.1293 l.23594 show_whatever - e-TeX show_groups
3045c2892
< @x [49] m.1295 l.23681 - e-TeX protected
---
> @x [49] m.1295 l.23629 - e-TeX protected
3060c2907
< @x [49] m.1296 l.23689 - e-TeX sparse arrays
---
> @x [49] m.1296 l.23637 - e-TeX sparse arrays
3071c2918
< @x [50] m.1307 l.23831 - e-TeX basic
---
> @x [50] m.1307 l.23779 - e-TeX basic
3078c2925
< @x [50] m.1308 l.23846 - e-TeX basic
---
> @x [50] m.1308 l.23794 - e-TeX basic
3085c2932
< @x [50] m.1311 l.23900 - e-TeX sparse arrays
---
> @x [50] m.1311 l.23848 - e-TeX sparse arrays
3092c2939
< @x [50] m.1312 l.23923 - e-TeX sparse arrays
---
> @x [50] m.1312 l.23871 - e-TeX sparse arrays
3100c2947
< @x [50] m.1324 l.24117 - e-TeX hyph_codes
---
> @x [50] m.1324 l.24065 - e-TeX hyph_codes
3107c2954
< @x [50] m.1325 l.24145 - e-TeX hyph_codes
---
> @x [50] m.1325 l.24093 - e-TeX hyph_codes
3114c2961
< @x [51] m.1335 l.24365 final_cleanup - tracing
---
> @x [51] m.1335 l.24313 final_cleanup - tracing
3121c2968
< @x [51] m.1335 l.24388 final_cleanup - e-TeX marks, saved_items
---
> @x [51] m.1335 l.24336 final_cleanup - e-TeX marks, saved_items
3130c2977
< @x [51] m.1336 l.24398 init_prim - e-TeX basic
---
> @x [51] m.1336 l.24345 ] m.1336 l.24340 init_prim - e-TeX basic
3137c2984
< @x [51] m.1337 l.24413 - e-TeX basic
---
> @x [51] m.1337 l.24360 - e-TeX basic
3144c2991
< @x [51] m.1337 l.24421 - e-TeX basic
---
> @x [51] m.1337 l.24368 - e-TeX basic
3151,3152c2998,2999
< @x [53] m.1362 l.24762 adv_past - e-TeX hyph_codes
<     begin cur_lang:=what_lang(#); l_hyf:=what_lhm(#); r_hyf:=what_rhm(#);@+end
---
> @x [53] m.1363 l.24715 - e-TeX hyph_codes
> adv_past(s)
3154,3156c3001,3004
<     begin cur_lang:=what_lang(#); l_hyf:=what_lhm(#); r_hyf:=what_rhm(#);
<     set_hyph_index;
<     end
---
> if subtype(s)=language_node then
>   begin cur_lang:=what_lang(s); l_hyf:=what_lhm(s); r_hyf:=what_rhm(s);
>   set_hyph_index;
>   end
3159c3007
< @x [54] m.1379 l.24956 - e-TeX additions
---
> @x [54] m.1379 l.24903 - e-TeX additions
3203a3052
> @d eTeX_revision_code=6 {command code for \.{\\eTeXrevision}}
3219a3069,3077
> @ @<Cases of |convert| for |print_cmd_chr|@>=
> eTeX_revision_code: print_esc("eTeXrevision");
> 
> @ @<Cases of `Scan the argument for command |c|'@>=
> eTeX_revision_code: do_nothing;
> 
> @ @<Cases of `Print the result of command |c|'@>=
> eTeX_revision_code: print(eTeX_revision);
> 
3776,3777c3634,3635
< {}\\hbox to \\hsize\{\cr
< \hskip 25pt \\hskip 0pt plus 0.0001fil\cr
---
> {}\\vbox to \\vsize\{\cr
> \hskip 25pt \\vskip 0pt plus 0.0001fil\cr
3779c3637
< \hskip 25pt \\hfil\\penalty-200\\hfilneg\cr
---
> \hskip 25pt \\vfil\\penalty-200\\vfilneg\cr
3781,3805c3639,3661
< the stretch components of \.{\\hfil} and \.{\\hfilneg} compensate; they may,
< however, get modified in order to prevent arithmetic overflow during
< |hlist_out| when each of them is multiplied by a large |glue_set| value.
< 
< Since this ``glue rounding'' depends on state variables |cur_g| and
< |cur_glue| and \TeXXeT\ is supposed to emulate the behaviour of \TeXeT\
< (plus a suitable postprocessor) as close as possible the glue rounding
< cannot be postponed until (segments of) an hlist has been reversed.
< 
< The code below is invoked after the effective width, |rule_wd|, of a glue
< node has been computed. The glue node is either converted into a kern node
< or, for leaders, the glue specification is replaced by an equivalent rigid
< one; the subtype of the glue node remains unchanged.
< 
< @<Handle a glue node for mixed...@>=
< if (((g_sign=stretching) and (stretch_order(g)=g_order)) or
<     ((g_sign=shrinking) and (shrink_order(g)=g_order))) then
<   begin fast_delete_glue_ref(g);
<   if subtype(p)<a_leaders then
<     begin type(p):=kern_node; width(p):=rule_wd;
<     end
<   else  begin g:=get_node(glue_spec_size);@/
<     stretch_order(g):=filll+1; shrink_order(g):=filll+1; {will never match}
<     width(g):=rule_wd; stretch(g):=0; shrink(g):=0; glue_ptr(p):=g;
<     end;
---
> the stretch components of \.{\\vfil} and \.{\\vfilneg} compensate;
> in standard \TeX\ they may get modified in order to prevent arithmetic
> overflow during |ship_out| when each of them is multiplied by a large
> |glue_set| value.
> 
> In \eTeX\ the conversion from stretch or shrink components of glue to
> \.{DVI} units is performed by the |do_glue| function defined below.
> 
> In extended mode the |do_glue| function adds up the relevant stretch (or
> shrink) components of consecutive glue nodes and converts the glue nodes
> into equivalent kern nodes; during this process glue specifications may
> be recycled.  The accumulated stretch or shrink is then multiplied by
> |glue_set(this_box)| and returned as result.  Since one and the same box
> may be used several times inside leaders the result is also added to the
> width of the first or only kern node; the subtype of the glue node(s)
> remains unchanged.  The consecutive glue nodes may be separated by
> insert, mark, adjust, kern, and penalty nodes.
> 
> @d add_glue(#)==#:=#+do_glue(this_box,p)
> @#
> @d add_stretch_shrink== {accumulate stretch or shrink amount}
> if g_sign=stretching then
>   begin if stretch_order(g)=g_order then s:=s+stretch(g);
3806a3663,3694
> else  begin if shrink_order(g)=g_order then s:=s-shrink(g);
>   end
> 
> @<Declare procedures needed in |hlist_out|, |vlist_out|@>=
> function do_glue(@!this_box,@!p:pointer):scaled;
> label continue, next_p, done;
> var q:pointer; {list traverser}
> @!g_order: glue_ord; {applicable order of infinity for glue}
> @!g_sign: normal..shrinking; {selects type of glue}
> @!s:scaled; {accumulated stretch or shrink}
> @!glue_temp:real; {glue value before rounding}
> begin g_order:=glue_order(this_box); g_sign:=glue_sign(this_box);
> s:=0; add_stretch_shrink;
> if not eTeX_ex or(subtype(p)>=a_leaders) then goto done;
> q:=p;
> continue: type(q):=kern_node; width(q):=width(g);
> fast_delete_glue_ref(g);
> next_p: q:=link(q);
> if (q<>null) and not is_char_node(q) then case type(q) of
> ins_node,mark_node,adjust_node,kern_node,penalty_node: goto next_p;
> glue_node: if subtype(q)<a_leaders then
>   begin g:=glue_ptr(q); add_stretch_shrink; goto continue;
>   end;
> othercases do_nothing
> endcases;@/
> done: if s<>0 then
>   begin vet_glue(float(glue_set(this_box))*s); s:=round(glue_temp);
> @^real multiplication@>
>   if type(p)=kern_node then width(p):=width(p)+s;
>   end;
> do_glue:=s;
> end;
3818c3706
< explicitly by the |ship_out| routine and is written to a normal \.{DVI}
---
> explicitely by the |ship_out| routine and is written to a normal \.{DVI}
3887c3775
< if (type(p)=hlist_node)and(box_lr(p)=dlist) then print(", display")
---
> if (type(p)=hlist_node)and(subtype(p)=dlist) then print(", display")
3907a3796
> @!LR_temp:pointer; {holds a temporarily removed \.{\\endM} node}
3913c3802
< LR_ptr:=null; LR_problems:=0; cur_dir:=left_to_right;
---
> LR_temp:=null; LR_ptr:=null; LR_problems:=0; cur_dir:=left_to_right;
3952a3842,3872
> @ Special \.{\\beginM} and \.{\\endM} nodes are inserted in cases where
> math nodes are discarded during line breaking or end up in different
> lines.  When the current lists ends with an \.{\\endM} node that node is
> temporarily removed and later reinserted when the last node is to be
> inspected or removed.  A final \.{\\endM} preceded by a |char_node| will
> not be removed.
> 
> @<Declare \eTeX\ procedures for sc...@>=
> procedure remove_end_M;
> var @!p:pointer; {runs through the current list}
> begin p:=head;
> while link(p)<>tail do p:=link(p);
> if not is_char_node(p) then
>   begin LR_temp:=tail; link(p):=null; tail:=p;
>   end;
> end;
> 
> @ @<Declare \eTeX\ procedures for sc...@>=
> procedure insert_end_M;
> label done;
> var @!p:pointer; {runs through the current list}
> begin if not is_char_node(tail) then
>  if (type(tail)=math_node)and(subtype(tail)=begin_M_code) then
>   begin free_node(LR_temp,small_node_size); p:=head;
>   while link(p)<>tail do p:=link(p);
>   free_node(tail,small_node_size); link(p):=null; tail:=p; goto done;
>   end;
> link(tail):=LR_temp; tail:=LR_temp;
> done: LR_temp:=null;
> end;
> 
3985,4009d3904
< @ @<Initialize |hlist_out| for mixed...@>=
< if eTeX_ex then
<   begin @<Initialize the LR stack@>;
<   if box_lr(this_box)=dlist then
<     if cur_dir=right_to_left then
<       begin cur_dir:=left_to_right; cur_h:=cur_h-width(this_box);
<       end
<     else set_box_lr(this_box)(0);
<   if (cur_dir=right_to_left)and(box_lr(this_box)<>reversed) then
<     @<Reverse the complete hlist and set the subtype to |reversed|@>;
<   end
< 
< @ @<Finish |hlist_out| for mixed...@>=
< if eTeX_ex then
<   begin @<Check for LR anomalies at the end of |hlist_out|@>;
<   if box_lr(this_box)=dlist then cur_dir:=right_to_left;
<   end
< 
< @ @<Handle a math node in |hlist_out|@>=
< begin if eTeX_ex then
<     @<Adjust \(t)the LR stack for the |hlist_out| routine; if necessary
<       reverse an hlist segment and |goto reswitch|@>;
<   cur_h:=cur_h+width(p);
<   end
< 
4060,4061c3955,3956
< cur_h:=0; link(p):=reverse(this_box,null,cur_g,cur_glue); width(p):=-cur_h;
< cur_h:=save_h; set_box_lr(this_box)(reversed);
---
> cur_h:=0; link(p):=reverse(this_box,null); width(p):=-cur_h;
> cur_h:=save_h; subtype(this_box):=reversed;
4074c3969
< link(p):=reverse(this_box,new_edge(reflected,0),cur_g,cur_glue);
---
> link(p):=reverse(this_box,new_edge(reflected,0));
4079,4086c3974,3979
< @ OLD VERSION.
< The |reverse| function defined here is responsible to reverse the
< nodes of an hlist (segment). The first parameter |this_box| is the enclosing
< hlist node, the second parameter |t| is to become the tail of the reversed
< list, and the global variable |temp_ptr| is the head of the list to be
< reversed. Finally |cur_g| and |cur_glue| are the current glue rounding state
< variables, to be updated by this function. We remove nodes from the original
< list and add them to the head of the new one.
---
> @ The |reverse| function defined here is responsible to reverse the
> nodes of an hlist (segment). The first parameter |this_box| is the
> enclosing hlist node, the second parameter |t| is to become the tail of
> the reversed list, and the global variable |temp_ptr| is the head of the
> list to be reversed. We remove nodes from the original list and add them
> to the head of the new one.
4089,4090c3982
< function reverse(@!this_box,@!t:pointer; var cur_g:scaled;
<   var cur_glue:real):pointer;
---
> function reverse(@!this_box,@!t:pointer):pointer;
4095d3986
< @!g_order: glue_ord; {applicable order of infinity for glue}
4097d3987
< @!glue_temp:real; {glue value before rounding}
4099c3989
< begin g_order:=glue_order(this_box); g_sign:=glue_sign(this_box);
---
> begin g_sign:=glue_sign(this_box);
4111,4200d4000
< @ NEW VERSION.
< The |reverse| function defined here is responsible to reverse (parts of)
< the nodes of an hlist.  The first parameter |this_box| is the enclosing
< hlist node, the second parameter |t| is to become the tail of the reversed
< list, and the global variable |temp_ptr| is the head of the list to be
< reversed.  Finally |cur_g| and |cur_glue| are the current glue rounding
< state variables, to be updated by this function.
< 
< @<Declare procedures needed in |hlist_out|, |vlist_out|@>=
< @{
< @t\4@>@<Declare subprocedures for |reverse|@>@;
< function reverse(@!this_box,@!t:pointer; var cur_g:scaled;
<   var cur_glue:real):pointer;
< label reswitch,next_p,done;
< var l:pointer; {the new list}
< @!p:pointer; {the current node}
< @!q:pointer; {the next node}
< @!g_order: glue_ord; {applicable order of infinity for glue}
< @!g_sign: normal..shrinking; {selects type of glue}
< @!glue_temp:real; {glue value before rounding}
< @!m,@!n:halfword; {count of unmatched math nodes}
< begin g_order:=glue_order(this_box); g_sign:=glue_sign(this_box);
< @<Build a list of segments and determine their widths@>;
< l:=t; p:=temp_ptr; m:=min_halfword; n:=min_halfword;
< loop@+  begin while p<>null do
<     @<Move node |p| to the new list and go to the next node;
<     or |goto done| if the end of the reflected segment has been reached@>;
<   if (t=null)and(m=min_halfword)and(n=min_halfword) then goto done;
<   p:=new_math(0,info(LR_ptr)); LR_problems:=LR_problems+10000;
<     {manufacture one missing math node}
<   end;
< done:reverse:=l;
< end;
< @}
< 
< @ We cannot simply remove nodes from the original list and add them to the
< head of the new one; this might reverse the order of whatsit nodes such
< that, e.g., a |write_node| for a stream appears before the |open_node|
< and\slash or after the |close_node| for that stream.
< 
< All whatsit nodes as well as hlist and vlist nodes containing such nodes
< must not be permuted.  A sequence of hlist and vlist nodes not containing
< whatsit nodes as well as char, ligature, rule, kern, and glue nodes together
< with math nodes not changing the text direction can be explicitly reversed. 
< Embedded sections of left-to-right text are treated as a unit and all
< remaining nodes are irrelevant and can be ignored.
< 
< In a first step we determine the width of various segments of the hlist to
< be reversed: (1)~embedded left-to-right text, (2)~sequences of permutable or
< irrelevant nodes, (3)~sequences of whatsit or irrelevant nodes, and
< (4)~individual hlist and vlist nodes containing whatsit nodes.
< 
< @d segment_node=style_node
< @d segment_node_size=style_node_size {number of words in a segment node}
< @d segment_first(#)==info(#+2) {first node of the segment}
< @d segment_last(#)==link(#+2) {last node of the segment}
< 
< @<Declare subprocedures for |reverse|@>=
< function new_segment(@!s:small_number;@!f:pointer):pointer;
<   {create a segment node}
< var p:pointer; {the new node}
< begin p:=get_node(segment_node_size); type(p):=segment_node; subtype(p):=s;
< width(p):=0; {the |width| field will be set later}
< segment_first(p):=f; segment_last(p):=f;
< new_segment:=p;
< end;
< 
< @ @<Build a list of segments and determine their widths@>=
< begin
< end
< 
< @ Here is a recursive subroutine that determines if the hlist or vlist
< node~|p| contains whatsit nodes.
< 
< @<Declare subprocedures for |reverse|@>=
< function has_whatsit(@!p:pointer):boolean;
< label exit;
< begin p:=list_ptr(p); has_whatsit:=true;
< while p<>null do
<   begin if not is_char_node(p) then
<     case type(p) of
<     hlist_node, vlist_node: if has_whatsit(p) then goto exit;
<     whatsit_node: goto exit;
<     othercases do_nothing
<     endcases;@/
<   p:=link(p);
<   end;
< has_whatsit:=false;
< exit: end;
< 
4226c4026,4028
< @ Here we compute the effective width of a glue node as in |hlist_out|.
---
> @ Here we have to remember that |add_glue| may have converted the glue
> node into a kern node.  If this is not the case we try to covert the
> glue node into a rule node.
4229,4230c4031,4038
< glue_node: begin round_glue;
<   @<Handle a glue node for mixed...@>;
---
> glue_node: begin g:=glue_ptr(p); rule_wd:=width(g);
> if g_sign<>normal then add_glue(rule_wd);
> if subtype(p)>=a_leaders then
>   begin temp_ptr:=leader_ptr(p);
>   if type(temp_ptr)=rule_node then
>     begin delete_glue_ref(g); free_node(p,small_node_size);
>     p:=temp_ptr; width(p):=rule_wd;
>     end;
4231a4040
> end;
4237,4239c4046,4048
<   temp_ptr:=p; p:=get_avail; mem[p]:=mem[lig_char(temp_ptr)]; link(p):=q;
<   free_node(temp_ptr,small_node_size); goto reswitch;
<   end;
---
> temp_ptr:=p; p:=get_avail; mem[p]:=mem[lig_char(temp_ptr)]; link(p):=q;
> free_node(temp_ptr,small_node_size); goto reswitch;
> end;
4503c4312
< if box_lr(p)=dlist then q:=p {display or equation number}
---
> if subtype(p)=dlist then q:=p {display or equation number}
5094c4903
< @ Here we declare two trivial procedures in order to avoid mutually
---
> @ Here we declare to trivial procedures in order to avoid mutually
5507c5316
< the type of quantity (|int_val|, |dimen_val|, |glue_val|, |mu_val|,
---
> the type of quantity (|int_avl|, |dimen_val|, |glue_val|, |mu_val|,
5694c5503
<   if cur_ptr<>null then
---
>   if cur_ptr<>0 then
6104c5913
< @ The new algorithm for the last line requires that the stretchability of
---
> @ The new algorithm for the last line requires that the stretchability
6155c5964
<     compute the corresponding |fit_class|, and |goto found|@>
---
>     compute the corresponding |fit_class, and |goto found||@>
6158c5967
<     compute the corresponding |fit_class|, and |goto found|@>;
---
>     compute the corresponding |fit_class, and |goto found||@>;
