<?xml version='1.0' encoding='iso-8859-1'?>
<!DOCTYPE unknown SYSTEM 'unknown.dtd'>
<!-- Translated from latex by tralics 2.14.4, date: 2019/05/16-->
<unknown>
<error n='\title' l='14' c='Undefined command'/><p>SwiftPad: Exploring WYSIWYG <LaTeX/> Editing on Electronic Paper</p>
<error n='\maketitle' l='28' c='Undefined command'/><error n='\abstract' l='30' c='Undefined environment'/><p>Electronic paper (i.e., e-paper) is a display technology that aims to imitate and substitute the conventional paper.
Previous studies of e-paper mainly focus on evaluating or making practical use of its readability. However, there is little research to explore the potential of e-paper on input-oriented applications.
In this paper, we introduce a novel document composition system named SwiftPad for e-paper.
Specifically, SwiftPad integrates the <LaTeX/> typesetting engine with the WYSIWYG concept,
enabling users to directly edit well typeset <LaTeX/> documents in their final print layout.
Building such a system on resource-constrained e-paper with a low refresh rate creates unique challenges.
We identify these challenges and name workable solutions.
We also provide a usability evaluation of the new system.
In short our finding is that the print aesthetics of <LaTeX/> documents naturally fits the paper-like perception of e-paper and being able to edit them efficiently in their print forms provides writers with a calming and pleasant atmosphere.</p>
<div0 id-text='1' id='cid1'><head>Introduction</head>
<p>E-paper is a display technology that mimics the appearance of ordinary ink on printed paper.
Owning to its excellent viewing experience including stable image, high contrast, wide viewing angle and non-glowing screen, e-paper has been widely adopted for various scenarios demanding high readability. The most typical application is the e-paper book readers, whose number is believed to exceed one billion in 2019 according to a survey from Research and Markets <cit><ref target='bid0'/></cit>.</p>
<p>More recently, e-paper devices equipped with a 13.3-inch screen are increasing in popularity.
Many manufacturers have been advertising their products as a digital device for writing and reading that feels like standard A4 paper.
This design philosophy, however in reality, is not entirely implemented.
Many devices indeed deliver decent reading experience to users, nevertheless few of them ever attach importance to the writing experience.
Though there exists a limited number of document composition applications (e.g., drawing and sketching), they are mostly rudimentary in a sense that the generated documents, without a further polishing process in a PC, are seldom suitable for formal scenarios (e.g., office or scientific work).
This deficiency mainly stems from the absence of typesetting functionality in the e-paper devices, causing a lack of aesthetics and formality in the generated documents.</p>
<p>In this paper, we aim to enhance the document composition and editing functionality in e-paper devices. We envision the new design meeting the following user experience goals:</p>
<p><hi rend='bold'>High Typographic Quality:</hi> The system should produce documents with a high typographic quality, which can be directly applicable in formal occasions.</p>
<p><hi rend='bold'>Simplicity:</hi> The user interface should only consist of basic editing primitives with a clear meaning, which allows users to concentrate on the actual document composition rather than tedious typesetting procedures.</p>
<p>To meet these requirements, we introduce a novel document processing system for generic e-paper devices, namely, SwiftPad. Specifically, SwiftPad integrates the <LaTeX/> typesetting engine with the WYWIWYG editing concept, which enables users to directly edit well-typeset <LaTeX/> documents in their final print layout.
This novel composition brings about immense advantages.
Firstly, the application of the acclaimed <LaTeX/> typesetting engine delivers an excellent typographic quality in the generated documents.
Secondly, the WYSIWYG interface can easily provide users with a simple and distraction-free editing experience.
Most importantly, the intermediate results in the WYSIWYG editor are a faithful display of the final print form. It means users can instantly review their current editing results as if they were reading a well typeset document on an e-paper device, which is generally considered as a delightful and calming experience.</p>
<p>However, implementing such a system entails three major challenges.
First, to function as a WYSIWYG editor, SwiftPad has to support not only faithful display, but also dynamic modification of PDF documents generated by <LaTeX/> engines. However, a PDF document is essentially a vector graphic, which is generally considered difficult to modify. No reliable and open-source tools on e-paper are available yet for this demanding requirement.</p>
<p>In addition, the WYSIWYG editor imposes a high requirement on the system responsiveness. Specifically, it is expected to deliver the faithful print form of a <LaTeX/> document in a reasonably small amount of time.
However, this is a demanding target since a conventional batch-processing <LaTeX/> engine is generally slow; it may takes the order of seconds to compile a long document in a modern computer even with decent specifications.</p>
<p>The third major challenge stems from the notable drawbacks of e-paper, which are low refresh rate and ghost effects.
This deficiency makes e-paper devices more suitable for displaying static contents rather than our WYSIWYG editor, which features constant screen update. Thus special optimization on e-paper devices is required in order to run our system smoothly.</p>
<p>In this paper, we present practical solutions to cope with the above challenges. Specifically, SwiftPad proposes a novel HTML5-based editor, which internally converts vector-based PDFs to semantic-based HTMLs so that the document contents can be faithfully displayed and easily modified by users. To ensure high reactivity of the system, SwiftPad employs a checkpoint technology on the <LaTeX/> engine to accelerate the compilation process by skipping unnecessary computation. To combat the low refresh rate and ghost effects of e-paper, SwiftPad enhances the e-paper display driver with a heuristic multi-queue scheduling algorithm to support applications featuring fast screen update.</p>
<p>We consolidated the above techniques and implemented a prototype of SwiftPad on several popular off-the-shelf 13.3-inch e-paper devices, based on which we conducted a preliminary user study involving six participants to evaluate the usability aspects of the system. The evaluation results show that participants reacted positively to the innovative WYSIWYG editor for e-paper and praised its calming, distraction-free, and pleasant editing experience.</p>
<p>To sum up, the main contributions of this paper are as follows.</p>
<list type='ordered'>
<item id-text='1' id='uid1' label='(1)'><p noindent='true'>We demonstrate a novel system architecture for a document processing system on e-paper devices in Section†<ref target='cid3'/>.</p>
</item>
<item id-text='2' id='uid2' label='(2)'><p noindent='true'>We propose a HTML5-based WYSIWYG editor for <LaTeX/> in Section†<ref target='cid4'/>.</p>
</item>
<item id-text='3' id='uid3' label='(3)'><p noindent='true'>We present a generic user-space checkpoint technology to accelerate the batch-style <LaTeX/> engine in Section†<ref target='cid5'/></p>
</item>
<item id-text='4' id='uid4' label='(4)'><p noindent='true'>We optimize the e-paper display driver to support applications that requires fast screen update in Section†<ref target='cid6'/>.</p>
</item>
<item id-text='5' id='uid5' label='(5)'><p noindent='true'>We conduct a preliminary pilot study evaluating usability aspects of the system in Section†<ref target='cid7'/>.</p>
</item></list>
</div0>
<div0 id-text='2' id='cid2'><head>Related Work</head>
<div1 id-text='1' id='uid6'><head>Readability of E-paper</head>
<p>E-paper has been generally considered to be a promising display technology in the field of reading. A number of research has been done to evaluate the readability of e-paper.
An early work from Siegenthaler et. al <cit><ref target='bid1'/></cit>, <cit><ref target='bid2'/></cit> analyzed and compared reading behavior on e-paper displays and on printed paper. The results suggest that the reading behavior on e-paper is highly similar to the reading behavior on printed paper. Another clinical research from Benedetto et. al <cit><ref target='bid3'/></cit>, <cit><ref target='bid4'/></cit> evaluates readability of different electronic reading devices and one classic paper book. The results indicate that reading on the LCD-based screens triggers higher visual fatigue with respect to both the e-paper and classic paper books, while there exists no significant difference between e-paper and classic paper. A similar work from Zambarbieri et. al <cit><ref target='bid5'/></cit> conducted an analysis of the eye movements during silent reading of the e-paper devices and a printed book with the help of the video‚Äêoculographic eye-tracking technology. The experiments reveal that subjects' reading behaviour on e-paper devices is similar to reading from a printed book. It also suggested that reading in e-paper generated a higher level of reading performance than reading in a LCD device.</p>
</div1>
<div1 id-text='2' id='uid7'><head>E-paper Applications</head>
<p>E-paper devices, thanks to high readability and commercial availability, have been applied in numerous useful applications across various domains.
For instances, Chiu et al. <cit><ref target='bid6'/></cit> evaluates the potential of using the e-paper readers to encourage students to cultivate healthy reading behaviors. Blankenbach et al. <cit><ref target='bid7'/></cit> proposed a smart medicine package, which is equipped with e‚Äêpaper driven by a bluetooth-enabled microcontroller. It aims to address the issue that today's packaging for pharmaceutics provides no information about individual medicine intake. Similarly AlterWear <cit><ref target='bid8'/></cit> presents an architecture for new wearable devices that implement a batteryless design using electromagnetic induction via NFC and e-paper displays.</p>
<p>However, most existing research works solely focus on evaluating or making use of readability of e-paper. There is little research on applying e-paper in scenarios other than reading. Recently, a research work <cit><ref target='bid9'/></cit> discussed the possibility of using E-paper devices in input-oriented applications that are realistic for both office work and school education. Motivated by this work, we have identified that a WYSIWYG editor for <LaTeX/> documents would be a natural input-oriented extension for e-paper.</p>
</div1>
<div1 id-text='3' id='uid8'><head>Integrating WYSIWYG with <LaTeX/></head>
<p>Previously, several attempts have been made to implement <LaTeX/> based WYSIWYG editors (note that the notion of a WYSIWYG editor may be used in a somewhat loose manner).
One preliminary approach is the 'Rich Text' feature adopted by Overleaf <cit><ref target='bid10'/></cit>, where the source code is styled in different colors and fonts accordingly to the categories of terms.
Still, there exists a strong visual disagreement between the source and output document and the user has to alternate and switch focus between them in many cases.
A more sophisticated work LyX <cit><ref target='bid11'/></cit> is an open source document processor adopting a WYSIWYM approach, where what shows up on the screen is only an approximation of what will show up on the page.
More recently, Bakoma <TeX/> <cit><ref target='bid12'/></cit> and SwiftLaTeX <cit><ref target='bid13'/></cit> manages to deliver a faithful WYSIWYG editing experience for users in conventional PCs.</p>
<p>Though these works shed light on SwiftPad, they are not directly applicable due to two major reasons. First, they are originally designed for PCs and tend to have high system requirements. However, e-paper devices tend to have strict resource constraints. Secondly, the implementation of existing works do not take the special properties of e-paper screens into consideration, potentially leading to a poor user experience. Instead, SwiftPad presented in this work is specially optimized for e-paper devices from the ground up.</p>
</div1></div0>
<div0 id-text='3' id='cid3'><head>System Overview</head>
<figure width='384.2974pt' file='figures/keyboard1' id-text='1' id='uid9'><head>General Hardware Setup</head>
</figure>
<p>Fig.<ref target='uid9'/> demonstrates the general hardware setup of SwiftPad, consisting an 13.3-inch e-paper device and an optional wireless bluetooth keyboard. We argue that keyboards are so far the most reliable input instrument for SwiftPad because of their popularity and users' familiarity. Nevertheless, we will discuss the possibility of integrating other input technologies such as speech recognition and handwriting input in Section†<ref target='cid8'/>.</p>
<p>The e-paper device is now running a set of software components, whose architecture is demonstrated in Fig.†<ref target='uid10'/>.
The topmost layer is the user interface (UI). Its WYSIWYG editor enables users to view and edit the PDF documents in their print forms.
One key insight of this UI layer is that it is fully implemented in modern web-based technology (i.e., HTML5, CSS3, and Javascript), which
can deliver high portability among different e-paper devices, tablets and PCs. Besides the portability, the HTML5-powered user interface, compared with conventional PDF viewers, features higher interactiveness and faster rendering on devices with low-end specifications <cit><ref target='bid14'/></cit>, <cit><ref target='bid15'/></cit>. This is crucial because most off-the-shelf e-paper devices only possess limited computation ability (e.g., single-core 1GHz ARM CPU).</p>
<p>The component beneath the UI is the system utilities, which provides the UI with the runtime environment and typesetting functionality.
For example, the Webkit engine is in charge of parsing and rendering the HTML5 pages from the UI and the <LaTeX/> engine handles document compilation requests.
It is worth noting that, the typesetting engine has been enhanced with a userspace checkpoint technology, which reduces the compilation time by skipping the unmodified pages and makes the WYSIWYG editor more responsive.</p>
<p>The bottom layer is the Operating System (OS), which provides an embedded Linux environment (Busybox) implemented with size-optimization and limited resources in mind. It also contains an enhanced e-paper display driver, which significantly improves the viewing experience of e-paper applications that require constant screen update.</p>
<figure width='341.6013pt' file='figures/firefoxos' id-text='2' id='uid10' place='h'><head>System Architecture</head>
</figure>
<p>Note that most off-the-shelf e-paper devices simply adopt Android OSs, which we argue is not an ideal solution.
Notably, Android has been designed to enable multimedia functionalities (e.g., gaming and video playback) in conventional mobile phones or tablets. Thus, Android comes with a great number of multimedia system services that are not utilized by e-paper devices. This leads to waste of system resources and unnecessary battery drain. In contrast, our system architecture is tailored for the e-paper devices with low specifications from the ground up. It is thus more resource-efficient and potentially provides a longer battery life.</p>
</div0>
<div0 id-text='4' id='cid4'><head>User Interface Design</head>
<figure width='405.6487pt' file='figures/UIscreenshot' id-text='3' id='uid11' place='t'><head>User Interface of SwiftPad.</head>
</figure>
<p>We design a simple-yet-powerful user interface for SwiftPad as shown in Fig.†<ref target='uid11'/>. Note that the screenshot is directly captured from a e-paper device's graphics memory in pursuit for better presentation purposes. It can be seen that SwiftPad offers two different editing views.
The first one is the source view, which allows advanced users to directly manipulate <LaTeX/> source code in a classical ASCII editor.
This view needs to be preserved because only in source code can arbitrary <LaTeX/> scripting be done.</p>
<div1 id-text='1' id='uid12'><head>A WYSIWYG Editor for <LaTeX/></head>
<p>Nevertheless, the main contribution lies in the WYSIWYG view.
This is an editable PDF viewer that allows the user to directly edit a document in its print form, but with effect on the source. More specifically, the viewer possesses the following features:</p>
<list type='ordered'>
<item id-text='1' id='uid13' label='(1)'><p noindent='true'>At editing quiescence (i.e., a moment when the editor has processed all previous edits of the user, and there are hence no pending edits that would further change the output), the editor shows the print layout of the PDF document, i.e., acts as a faithful print viewer.</p>
</item>
<item id-text='2' id='uid14' label='(2)'><p noindent='true'>At editing quiescence, the user can position the cursor anywhere in the document with the mouse/touchscreen, arrow keys or a combination thereof.</p>
</item>
<item id-text='3' id='uid15' label='(3)'><p noindent='true'>The user can perform edits at the cursor position by simply typing the keys or backspace and get immediate feedback in the sense that the editor shows a <hi rend='it'>preview version</hi> of the print view. This is mainly achieved by mimicking the typesetting behavior used in the <LaTeX/> engine. For instance, when a character is being appended, it will automatically inherit the font settings from the previous characters to make itself visually agreeable.</p>
</item>
<item id-text='4' id='uid16' label='(4)'><p noindent='true'>To retain the modification, the user's editing operations will also be applied at the corresponding position of the <LaTeX/> source code. (This requires the editor to possess the ability to infer the source code position of each element in the PDF with character-wise accuracy.
In our implementation, we achieve this with the help of a <LaTeX/> plugin introduced in the work <cit><ref target='bid13'/></cit>. In short, the plugin enables position inference by patching the typesetting engine with a bookkeeping mechanism, where it constructs a position record for each character in the input source file and output them to the PDF file as metadata (also known as `Tagged PDF'). The position info in the PDF then can be retrieved by our specifically-designed editor, while being safely ignored by the conventional PDF viewers. )</p>
</item>
<item id-text='5' id='uid17' label='(5)'><p noindent='true'>If the user input pauses, the editor reaches editing quiescence automatically in a reasonable amount of time. It is achieved by replacing the current preview version with the latest compilation result, i.e., faithful output, from the <LaTeX/> engine.</p>
</item></list>
<p>These features also constitute a precise definition for the notion of a WYSIWYG editor for <LaTeX/> used in our paper. We envision that such a WYSIWYG editor is satisfactory for e-paper devices where a sufficiently large proportion of scientific/technical documents could be edited.</p>
<figure width='341.6013pt' file='figures/htmlconvert' id-text='4' id='uid18' place='t'><head>Workflow of the conversion algorithm</head>
</figure>
</div1>
<div1 id-text='2' id='uid19'><head>Faithful Conversion from PDFs to HTMLs</head>
<p>To implement such a WYSIWYG editor, our system has to support not only faithful display, but also dynamic modification of PDF contents (i.e., instantly generating the preview version in response to the user's input).
However, it is considered challenging because a PDF document is essentially a vector graphic, which is difficult to edit.
Though there exist a limited number of commercial closed-source products (e.g., FoxIt PhantomPDF viewer <cit><ref target='bid16'/></cit>) which support simple `touch
up' operations such as adding or removing words, we argue that these solutions are not directly applicable for e-paper devices. First, they are originally designed for PCs and tend to pose unacceptable computational burden on resource-constrained e-paper devices. Moreover, these products are generally not portable among devices with different hardware specifications and software architectures.</p>
<p>To address these issues, we explore a novel approach to implement the WYSIWYG view by converting PDFs to HTML pages in a nearly faithful manner. Displaying HTML pages brings about a wide range of advantages. First, HTML pages are of high portability and can be displayed in various devices equipped with browsers. Meanwhile, rendering HTML pages in modern browsers is a relatively lightweight operation even for devices with low-end specifications. Most importantly, unlike vector-based PDFs, HTML pages are semantic-based; texts in HTML pages are typically surrounded by HTML semantic markup, which allows them to be dynamically modified with the help of Javascript. It facilitates the implementation of commonly-used word processing functionalities (e.g., text selection, insertion, deletion, copying and pasting) in the WYSIWYG view.</p>
<p>To achieve a nearly faithful conversion, SwiftPad employs the following mechanisms to preserve the following kinds of elements in PDFs.</p>
<p><hi rend='bold'>Images.</hi> PDF supports graphical instructions such as drawing and image embedding. To preserve the graphic elements, we rasterize them into bitmap images, which then can be displayed using the CSS sprite technique <cit><ref target='bid17'/></cit>.</p>
<p><hi rend='bold'>Font Embedding.</hi> Fonts can be embedded in a PDF file, which ensures that readers always see the text in its original font. To preserve the fonts in a PDF, we extract all the fonts from the PDF and convert them into web open font types (WOFF) with the help of two third-party libraries MuPDF <cit><ref target='bid18'/></cit> and FontForge <cit><ref target='bid19'/></cit>. The converted fonts then can be embedded in HTML pages using a CSS rule named `font-face' <cit><ref target='bid17'/></cit>.</p>
<p><hi rend='bold'>Text Locations.</hi> Text elements are positioned with absolute coordinates in a PDF document. To preserve the locations in the HTML pages, one naive method is to convert the locations into CSS absolute position rules and assign them to HTML text elements. However, since each text segment is now associated with a unique CSS rule, the page may be too bulky to store and transfer. Moreover, the absolute positions are not flexible; when a user inserts or deletes some texts,
a large number of CSS position rules must be changed accordingly in order to achieve text reflow functionality.</p>
<p>Inspired by a more recent tool <cit><ref target='bid20'/></cit>, we attempt a relative positioning method to position each text segment. A simple example in Fig.†<ref target='uid18'/> demonstrates the intuition of our approach. Specifically, we first attempt to merge PDF text segments to text lines based on their geometric metrics. Afterwards, we measure the space width between words in each line and turn them into CSS rules. Finally, these rules can be used to construct HTML spacer elements (i.e., empty span elements in a certain width) to help position each text element from left to right in each line.
The advantage of this approach is that the number of generated CSS rules tends to be tiny since there are usually limited number of spacers with different widths in a PDF page. We can further reduce the number by merging some rules which have nearly identical width values at the cost of faithfulness in text locations. As a result, this approach can generate HTML pages with a much smaller size compared with the naive approach.
Another important advantage is that this positioning method automatically enables text reflow functionality to a certain extent when texts are inserted or deleted.</p>
</div1></div0>
<div0 id-text='5' id='cid5'><head>Achieving High Responsiveness</head>
<p>One essential requirement for WYSIWYG editors is high responsiveness; it allows users to instantly see what the end result will look like while a document is being edited. In the context of SwiftPad, when a user types a key, our editor provides immediate response in the sense that it generates and shows a preview version of the document by mimicking the typesetting behavior used in the <LaTeX/> engine.
Though the typesetting imitation approach is feasible for minor editing, it possesses certain limits when dealing with lengthy edits.
As a consequence, without any further precautions, the difference between the previewing version and the faithful output from the <LaTeX/> engine would gradually accumulate along with the user's input. To address this issue, our editor periodically replaces the current preview version with the latest compilation result from the <LaTeX/> engine.</p>
<p>However, this replacement operation potentially leads to unresponsiveness of our editor due to the long turn around time of each compilation.
A complication process on conventional engines, depending on the complexity of the input source codes, can take several seconds to complete even on a computer with decent specifications (e.g., Intel i7 6900 with DDR4 memory and SSD storage). As a result, users may have to wait noticeable timespan in order to view the faithful output.</p>
<div1 id-text='1' id='uid20'><head>Accelerating <LaTeX/> Compilation Using Checkpointing</head>
<p>We find that the inefficiency of <LaTeX/> engines may be attributed to the following two reasons.
First, the <LaTeX/> engine, which was programmed decades ago, does not utilize the multi-threading feature of the modern machines. Thus, its execution speed is bounded by the clock rate of a single CPU core regardless of the number of cores.
Secondly, <LaTeX/> is a batching system, which implies that every time a compilation is initiated, the <LaTeX/> engine must process the input files from the very beginning. Such behavior is undesirable considering that, in most cases, users only append or modify characters located at the end of the input file, while leaving the preceding contents unchanged. Therefore, recompiling the unchanged contents leads to a considerable amount of repeated and unnecessary computation.</p>
<p>To accelerate the complication process, one potential approach is to overhaul the source code of the <LaTeX/> engine to add multi-threading support. However, this requires extensive reworking of the engines. More importantly, it may introduce unheeded bugs undermining the software stability.
Instead, we shift our attention on the second cause mentioned above and seek method to avoid the repeated computation between consecutive compilations.
The philosophy we apply here is called checkpointing, which consists of saving a snapshot of an application's state, so that it can restart from that point in the future. In the context of our enhanced <LaTeX/> engine, we create checkpoints periodically (e.g., after outputting a PDF page) and mark down the corresponding input file positions during the compilation process. When a new compilation job is submitted, based on the file position that users just edit on, the enhanced engine can determine the closest checkpoint and directly start from that point to skip the repeated computation.</p>
<p>Another optional trick to optimize responsiveness is that the engine does not have to process the whole input file in most cases. Instead, it may stop right after generating the page the user is currently viewing or editing. By combining this trick with the checkpoint technology, we can ensure the response time of the engine remains nearly constant regardless of the page number of documents. For instance, when the user is working on page 5, the engine can start from the checkpoint, which was generated when page 4 was being outputted, and only re-typeset the page 5. Though in some rare situations, contents from page 6 onwards may slightly affect the typesetting results of the page 5. We argue that the infrequent loss of faithfulness is negligible and would not seriously impact the overall user experience.</p>
</div1>
<div1 id-text='2' id='uid21'><head>Userspace Checkpoint Technology for <LaTeX/></head>
<p>Several runtime checkpoint implementations have been proposed. Early implementations are mainly kernel-based <cit><ref target='bid21'/></cit>. They utilize a specially-designed kernel module to save or restore process-related data structures in the kernel. However, the existing in-kernel implementations do not focus on upstream compatibility. As a result, it is very difficult to integrate them into recent mainline kernels and these implementations are therefore not further developed and abandoned.
To solve the issues of the in-kernel implementations, CRIU <cit><ref target='bid22'/></cit> proposes another approach; it implements as much functionality as possible in the user space and solely uses existing kernel interfaces. Despite the promising features of CRIU, it is a relatively heavyweight solution since it was originally designed for virtual machines or containers. It thus has to checkpoint a wide range of system-wide information not utilized by the <LaTeX/> engine (e.g., TCP sockets and process trees). This results in inefficiency of each checkpoint operation, which can take multiple seconds to finish.</p>
<p>These issues motivate us to propose a lightweight userspace checkpoint technology for the <LaTeX/> engine. Specifically, we utilize the dynamic hooking technique <cit><ref target='bid23'/></cit> to patch the engine on the runtime with the checkpoint logic. Each checkpoint operation solely saves three types of information including</p>
<p noindent='true'>1) CPU registers (e.g., Instruction Pointer)</p>
<p noindent='true'>2) memory segments including data, bss and heap</p>
<p noindent='true'>3) file position for each open file</p>
<p noindent='true'>and thus can be swiftly carried out (usually in less than 50 ms).</p>
<p>To fully recover the state of the <LaTeX/> engine, a special mechanism is required for memory segments. At first glance, restoring memory segments seems quite straightforward; we could simply write back the contents from the dump file to the original memory addresses. However, it is highly likely to fail due the stateful nature of the heap segment. Unlike data or bss segments whose sizes are pre-determined during the compilation, the size of the heap segment can vary constantly during the runtime. Specifically, when an executable allocates/releases a memory block via the standard C library calls `malloc'/`free', these functions internally invoke a system call `sbrk' to extend/shrink the heap segment. To efficiently manage the heap segment, the standard C library has to keep track of an important system state, namely, the current heap segment size. When the program is recovering from a checkpoint, in order for the C library to continue functioning properly, this system state has to be restored as well. However, the restoration functionality is generally not available in popular runtime C libraries (e.g., libc).</p>
<p>To address this issue, we patch the built-in heap allocator in the runtime C library such that rather than <hi rend='it'>sbrk</hi>, it now uses <hi rend='it'>mmap</hi> as the basic mechanism to obtain memory from the system. The advantage of using mmap is that it allows us to create a heap memory region that has been assigned a direct byte-for-byte correlation with a filesystem object. By duplicating the file, we will be able obtain to a snapshot of the heap memory region. To restore the region, we could simply map the snapshot file back to memory using <hi rend='it'>mmap</hi> again. This approach ensures that not only the heap segment contents, but also the heap segment size can be correctly restored across runs.</p>
<p>Special care is also given to the file objects, which are kernel objects and do not persist between runs. To address this issue, we will re-initialize every file object by reopening them and restore their file pointer positions by using the function <hi rend='it'>fseek</hi>.</p>
<p>To demonstrate the efficiency of our approach, we compare the compilation time of the conventional <LaTeX/> engine and our optimized engine in a same device with a single-core 1GHz ARM CPU and 512 MB RAM. Specifically, we first use a predefined set of <LaTeX/> code snippets to randomly generate a variety of <LaTeX/> sample documents, whose page numbers range from 1 to 100. Afterward,
we insert texts at random places of each document and then start the compilation. Such a procedure will be repeated 100 times for each document and the average compilation time will be reported.
The results are demonstrated in Fig.†<ref target='uid22'/>. It can be seen that the compilation time of the conventional <LaTeX/> engines increases proportionally with the page number of the <LaTeX/> documents. In the worst case, the 100-page document even consumes approximately 13 seconds.
We again conduct the measurements on our optimized engine. It can be seen that, regardless of the page number, the compilation time stays level (112 ms), which ensures high responsiveness to our editor.</p>
<figure width='362.9526pt' file='figures/time' id-text='5' id='uid22' place='t'><head>Compilation time comparison between the conventional Engine and the enhanced engine.</head>
</figure>
</div1></div0>
<div0 id-text='6' id='cid6'><head>Optimizing the E-paper Display Driver</head>
<p>Existing e-paper devices are mainly designed for displaying static contents. As a result, they are not well optimized for applications like the WYSIWYG editor, which requires constant screen update. In this section, we will elaborate our enhancement to the e-paper display driver to address this issue.</p>
<div1 id-text='1' id='uid23'><head>How E-paper Screens Work?</head>
<p>Before we can demonstrate the intuition of our enhancement, we first explain the internal display mechanism of e-paper screens.
An e-paper screen is controlled by a specifically-designed circuit, the Electrophoretic Display Controller (EPDC). It is responsible for driving corresponding electrical signals to the e-paper panel to update the screen contents upon receiving display update commands from the CPU.
Most update commands can be described as a tuple (<formula type='inline'><math xmlns='http://www.w3.org/1998/Math/MathML'><mi>x</mi></math></formula>, <formula type='inline'><math xmlns='http://www.w3.org/1998/Math/MathML'><mi>y</mi></math></formula>, <formula type='inline'><math xmlns='http://www.w3.org/1998/Math/MathML'><mi>w</mi></math></formula>, <formula type='inline'><math xmlns='http://www.w3.org/1998/Math/MathML'><mi>h</mi></math></formula>, <formula type='inline'><math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></math></formula>, <formula type='inline'><math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow></math></formula>). Specifically, the first five parameters denote the coordinate, size and content of the rectangle region pending to be updated. The <formula type='inline'><math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow></math></formula> parameter denotes the update mode, whose possible options include 2, 4, 8, or 16 graylevels.
The 16-graylevel update mode delivers the best display quality (i.e., highest contrast and little ghost effect) but consumes the longest timespan to finish (approximately 1 second).
The 2-graylevel update modes enables fast animation of the screen contents (approximately 150 ms) but may generate poor contrast texts and significant ghost effects.</p>
<p>To communicate with the EPDC, the OS requires a kernel driver.
One important task of the driver is to composite a update request tuple.
The system can obtain the first five parameters (i.e., <formula type='inline'><math xmlns='http://www.w3.org/1998/Math/MathML'><mi>x</mi></math></formula>, <formula type='inline'><math xmlns='http://www.w3.org/1998/Math/MathML'><mi>y</mi></math></formula>, <formula type='inline'><math xmlns='http://www.w3.org/1998/Math/MathML'><mi>w</mi></math></formula>, <formula type='inline'><math xmlns='http://www.w3.org/1998/Math/MathML'><mi>h</mi></math></formula>, <formula type='inline'><math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi></mrow></math></formula>) directly from the upper layer of the OS.
For the update mode, this info is typically not available since most OSs are designed for LCD screens which do not require the update mode information.
Therefore, the drivers have to provide a mechanism to infer the update mode.
However, most existing driver implementations possess an somewhat rudimentary update mode selection mechanism.
One of the most widely-used mechanisms is to provide a kernel interface to allow an application to manually specify the global update mode.
For instance, an application featuring constantly varied contents can enforce the 2-graylevel update mode; on the other hand, a reading application requiring high display quality can enforce 16-graylevel update mode.
However, this mechanism is relatively coarse-grained and may not be suitable for applications that simultaneously require fast response time and high display quality, so does our WYSIWYG editor.</p>
</div1>
<div1 id-text='2' id='uid24'><head>Heuristic Multi-queue Scheduling Algorithm for E-paper Display</head>
<figure width='341.6013pt' file='figures/heruist' id-text='6' id='uid25' place='t'><head>Multi-Queue scheduling algorithm</head>
</figure>
<p>In our work, we optimize the existing e-paper display driver to automatically strike a balance between the display quality and response time with a heuristic multi-queue scheduling algorithm.</p>
<p>As shown in Fig†<ref target='uid25'/>, our algorithm maintains three separate update queues including a manual queue, a paint queue and a repaint queue. The manual queue is a simple queue which only stores the incoming jobs that have update modes specified by the developer.
Specifically, we enhance the Webkit browser engine with an interface, which enables the HTML applications to choose a desired update mode for each HTML element by using a HTML data attribute named <hi rend='it'>data-updatemode</hi>. For instance, when the browser is rendering the HTML text element <hi rend='it'>&lt;span data-updatemode=4&gt;Open&lt;span&gt;</hi>, the screen update request will be sent to the manual queue and later painted using the 4 graylevel mode.</p>
<p>Nevertheless, most of the time developers do not manually specify the update mode. In this case, the paint and the repaint queue will be used. Specifically,
the paint queue stores all the incoming update requests without update mode info from the application, which will then be sequentially drawn on the screen using 2-graylevel mode. Intuitively, this ensures the e-paper screen display the latest contents as soon as possible (i.e., to deliver a responsive user experience).
After leaving the paint queue, the update job will enter the repaint queue and be later repainted again using 16-graylevel mode to improve the display quality (i.e., alleviate ghost effects and show high-contrast texts). In other words, if no new update jobs are submitted to the driver, the high display quality of the screen contents will eventually be achieved.</p>
<p>This algorithm also takes advantage of the simultaneous update feature of the EPDC, which allows multiple update requests to be processed at the same moment when their update regions do not overlap with each other. In other words, the painting jobs and repainting jobs may be carried out simultaneously if their update regions do not collide. This condition frequently holds true for our editor application. A typically example has been depicted in Fig.†<ref target='uid26'/>; at stage one, the user types a word `hello', which is drawn in 2 graylevel mode. At stage two, the user types another word `world', this word is still drawn in 2 graylevel mode while the previous word `hello' can be repainted using 16 graylevel mode at the same time since the update regions of the two words do not collide. At the last stage, the user stops typing, so the word `world' is repainted and all the words are now in 16 graylevel mode.</p>
<p>Note that the max number of simultaneous update regions is decided by available hardware resources of the EPDC and may be quite limited. When the application is overloading the EPDC by submitting too many update requests at the same time, we prioritize the three queues to optimize the average screen response time (manual &gt;paint &gt;repaint).
For a update request in a queue to be executed, two conditions must be met; 1) the EPDC has available resources, 2) all the update requests in those higher priority queues should have either finished the execution or been scheduled (i.e., being drawn).</p>
<figure width='341.6013pt' file='figures/helloworld' id-text='7' id='uid26' place='t'><head>A demonstrating example of the scheduling algorithm</head>
</figure>
</div1></div0>
<div0 id-text='7' id='cid7'><head>Evaluation</head>
<p>In this section, we demonstrate the settings and outcomes of our evaluation on usability of SwiftPad.</p>
<div1 id-text='1' id='uid27'><head>Experiment Devices</head>
<p>In our experiments, we deploy SwiftPad on two popular off-the-shelf 13.3-inch devices BOOX MAX <cit><ref target='bid24'/></cit> and reMarkable <cit><ref target='bid25'/></cit>.
The devices are built atop an NXP i.MX 6 Solo SoC <cit><ref target='bid26'/></cit>, which is equipped with a single-core 1Ghz CPU, 512MB DDR3 RAM and an EPDC. Since the SoC's bootloader and Linux kernel source codes are both publicly available on the Internet, we can easily modify the e-paper devices to meet our requirements (e.g., installing the enhanced e-paper driver).
Note that since SwiftPad features an implementation with high portability, it takes little effort to port SwiftPad to other devices with different hardware architectures or screen sizes.</p>
</div1>
<div1 id-text='2' id='uid28'><head>Usability Evaluation</head>
<p>The evaluation has been carried out as a Discount Usability Test, which involves a small number of participants with a focus on qualitative studies on prototype design <cit><ref target='bid27'/></cit>. Existing studies <cit><ref target='bid28'/></cit><cit><ref target='bid29'/></cit> have suggested that a discount usability test with only 5 participants can offer reliable evaluation results and may identify up to 85% of the usability problems. In our work, we invited 6 participants from academia to evaluate our system and gathered many important insights and feedbacks.
In the near future, we are planing to carry out a comprehensive usability study, which involves more participants from different domains.</p>
<p>Before undertaking the test, each subject was instructed to fill in a short questionnaire, which contains the following categories of questions on a five-point scale (strongly disagree, disagree, neutral, agree, strongly agree):</p>
<list type='simple'>
<item id-text='1' id='uid29'><p noindent='true'>Frequency and enjoyment of writing.</p>
</item>
<item id-text='2' id='uid30'><p noindent='true'>Familiarity of e-paper devices (i.e., how often do they read in e-paper).</p>
</item>
<item id-text='3' id='uid31'><p noindent='true'>Experience in various typesetting programs.</p>
</item></list>
<p>After that, each participant was instructed to perform the following tasks in an unsupervised manner; the subjects had to finish each task by themselves without any prior knowledge of SwiftPad.</p>
<list type='ordered'>
<item id-text='1' id='uid32' label='(1)'><p noindent='true'>The participants were required to compose an essay with at least 500 words, describing their current research focus.</p>
</item>
<item id-text='2' id='uid33' label='(2)'><p noindent='true'>Each participant was provided with an one-page English article on a topic of general interest. In each line of the article, there existed an obvious typo and the participants were supposed to correct it.</p>
</item></list>
<p>After completing these tasks, we required the participants to complete a System Usability Scale (SUS) questionnaire, which is a commonly-used reliable tool for perceived usability evaluation even with a small sample size.
We also encouraged participants to report their experience of using SwiftPad.</p>
<p><hi rend='bold'>SUS Score.</hi>
The mean SUS score of SwiftPad is 71 (in a range spanning from 0 to 100). It exceeds the threshold score of 68 which indicates a decent level of usability.
In addition, we also compute the mean values for the usability sub-scale and learnability sub-scale, which are 70 and 75 respectively.</p>
<p>Meanwhile, by considering participants' answers given in the background questionnaire, we obtain three more background sub-scores.
They are compared with the SUS score and sub-scale scores to obtain the Pearson correlation coefficients.
We notice a weak positive correlation between the user's familiarity of e-paper and the learnability sub-score, which implies that users who get used to reading in e-paper devices may find it easier to master our system.
However, due to the small sample size, each correlation measure appears to be not statistically significant. To reach a more solid conclusion, a more comprehensive dataset is required.</p>
<table rend='array' id-text='1' id='uid34' place='t'><head>Axial coding of the participants' comments</head>
<p><table rend='inline'><row bottom-border='true' top-border='true'><cell right-border='true' halign='left' left-border='true'>Categories</cell>
<cell right-border='true' halign='left'>Positive</cell>
<cell right-border='true' halign='left'>Negative</cell>
</row><row bottom-border='true'><cell right-border='true' halign='left' left-border='true'><table vpos='c' rend='inline'><row><cell>Paper-like viewing</cell>
</row><row><cell>experience</cell>
</row></table></cell>
<cell right-border='true' halign='left'>6</cell>
<cell right-border='true' halign='left'>0</cell>
</row><row bottom-border='true'><cell right-border='true' halign='left' left-border='true'><table vpos='c' rend='inline'><row><cell>Aesthetics</cell>
</row></table></cell>
<cell right-border='true' halign='left'>5</cell>
<cell right-border='true' halign='left'>0</cell>
</row><row bottom-border='true'><cell right-border='true' halign='left' left-border='true'>Simplicity</cell>
<cell right-border='true' halign='left'>4</cell>
<cell right-border='true' halign='left'>0</cell>
</row><row bottom-border='true'><cell right-border='true' halign='left' left-border='true'>Low distraction</cell>
<cell right-border='true' halign='left'>2</cell>
<cell right-border='true' halign='left'>0</cell>
</row><row bottom-border='true'><cell right-border='true' halign='left' left-border='true'>Latency</cell>
<cell right-border='true' halign='left'>1</cell>
<cell right-border='true' halign='left'>3</cell>
</row><row bottom-border='true'><cell right-border='true' halign='left' left-border='true'>Keyboard input</cell>
<cell right-border='true' halign='left'>0</cell>
<cell right-border='true' halign='left'>1</cell>
</row><row bottom-border='true'><cell right-border='true' halign='left' left-border='true'>Structural change</cell>
<cell right-border='true' halign='left'>0</cell>
<cell right-border='true' halign='left'>1</cell>
</row><row bottom-border='true'><cell right-border='true' halign='left' left-border='true'>Math editing</cell>
<cell right-border='true' halign='left'>1</cell>
<cell right-border='true' halign='left'>1</cell>
</row></table></p></table>
<p><hi rend='bold'>User Feedback.</hi>
All the participants' comments are summarized in Table†<ref target='uid34'/> using Axial coding.
On one hand, most participants praised the natural combination of excellent viewing experience of e-paper and print aesthetics of <LaTeX/> documents.
Meanwhile, this system still maintains simplicity; with the WYSIWYG editor that possesses simple editing primitives and high familiarity with existing word processors, participants can efficiently concentrate on the actual document composition or editing without mastering the complex <LaTeX/> scripts.
Two participants further commented that conventional PCs are usually equipped with noisy cooling fans and glowing screens leading to eye strain. In contrast, e-paper devices are quiet and their paper-like non-glowing screens provide a calming and almost distraction-free atmosphere for document writers.</p>
<p>On the other hand, Table†<ref target='uid34'/> also reveals some widely perceived issues.
One important issue highlighted was the screen latency.
Despite our effort to optimize the graphics stack, most participants, who get used to conventional LCD screens, can still perceive the display latency due to the hardware limit of e-paper screens.
Nevertheless, the participants were happy to accept the minor imperfection, which has limited impact on the usability of SwiftPad. One participant even provided an interesting argument that conventional typewriters tend to have much higher latency, however, impeding no functionality.
Meanwhile, one participant encouraged us to explore other input technologies other than keyboard. He suggested that handwritten input would also be a natural input method for e-paper devices.
Another issue was the rudimentary functionality to apply structural changes (e.g., adding a new section or list structure).
Currently, these structural changes could be applied via clicking the corresponding options in the context menu (i.e., pop-up menu).
However, one subject suggested us to mimic the autoformat features (e.g., automatic bullets or numbering) from Microsoft Word.
A related issue is about mathematical formulas editing. One subject noticed and praised the functionality of in-place mathematical formulas editing where users are allowed to change the text in an existing formula just like normal text. This functionality is quite useful in many scenarios, for instance, correcting the simple mathematical equations like <formula type='inline'><math xmlns='http://www.w3.org/1998/Math/MathML'><mrow><mn>1</mn><mo>-</mo><mfrac><mn>1</mn> <mn>4</mn></mfrac><mo>=</mo><mfrac><mn>2</mn> <mn>4</mn></mfrac></mrow></math></formula>. However, the subject also wished us to propose a method to insert or edit more complicated formulas without manipulating the <LaTeX/> source codes.</p>
</div1></div0>
<div0 id-text='8' id='cid8'><head>Further Discussions</head>
<p>SwiftPad shows the potential for WYSIWYG editing on an e-paper device. Still, it bears several limitations that need further improvement.</p>
<div1 id-text='1' id='uid35'><head>Exploring Alternative Input Technologies</head>
<p>Currently, SwiftPad adopts keyboards as the main input technology due to their popularity and users' familiarity. Nevertheless, we also realize the potential of other alternative input options, for instance, voice input and handwriting input.
SwiftPad currently provides experimental support for these two input options for users with the help of Google's voice API and text recognition API respectively. We plan to conduct a usability study in the future to evaluate the efficiency of each input method under different scenarios.</p>
</div1>
<div1 id-text='2' id='uid36'><head>Display Scheduling Algorithms</head>
<p>SwiftPad employs a multiple-queue scheduling algorithm in the graphics driver.
Despite the lack of performance analysis, the heuristic scheduling usually finds a solution close to the optimal one in a swift manner.
In the future work, we plan to reformulate the scheduling process as an optimization problem with the help of the queueing theory. We may be able to find an algorithm that computes the optimal scheduling orders or less ideally an approximate algorithm with performance guarantees.</p>
</div1>
<div1 id-text='3' id='uid37'><head>Facilitating Structural Edits</head>
<p>One challenge of WYSIWYG tools is to find a natural interface for structural edits.
Our preliminary design is a menu displaying pre-defined <LaTeX/> snippets or formulas, which are examples of the needed elements. For instance, a section header snippet could be "<hi rend='small'/><hi rend='small'><hi rend='tt'>\subsection{Sectiontitle}</hi></hi><hi rend='small'/>". In the menu, this is shown in its compiled version. If the user selects the snippet, essentially a paste (insert) of the snippet at the current cursor position is performed, which can be subsequently adapted by the user. This reduces the structural change to a simpler concept, the paste concept. It also provides a natural visual appearance and is in principle end-user-programmable.</p>
</div1>
<div1 id-text='4' id='uid38'><head>Collaborative Editing</head>
<p>SwiftPad provides experimental support for real-time collaboration where multiple SwiftPad devices can be allowed to work on the same document. In details, this is implemented using an operational transformation database named ShareDB <cit><ref target='bid30'/></cit>, which is invented for consistency maintenance and concurrency control in collaborative editing of text documents. A version control system is also implemented to allow users to track changes between different versions.</p>
</div1></div0>
<div0 id-text='9' id='cid9'><head>Conclusion</head>
<p>In this paper, we present SwiftPad, a novel document composition system for e-paper. It integrates the <LaTeX/> typesetting engine with the WYWIWYG editing concept, enabling users to directly edit and instantly review documents in their final print layout.
We have identified fundamental architectural challenges and named the corresponding resuable solutions.
We have also conducted a user study, where we found positive feedback that the system provides a pleasant document viewing and editing experience for writers.</p>
<biblio>
<citation from='year' key='BCDZ+14' id='bid4' userid='cite:benedetto2014effects' type='article'>
<bauteurs><bpers prenom='S.' nom='Benedetto' prenomcomplet='Simone'/><bpers prenom='A.' nom='Carbone' prenomcomplet='Andrea'/><bpers prenom='V.' nom='Drai-Zerbib' prenomcomplet='VÈronique'/><bpers prenom='M.' nom='Pedrotti' prenomcomplet='Marco'/><bpers prenom='T.' nom='Baccino' prenomcomplet='Thierry'/></bauteurs>
<btitle>Effects of luminance and illuminance on visual fatigue and arousal during digital reading</btitle>
<bjournal>Computers in human behavior</bjournal>
<bvolume>41</bvolume>
<byear>2014</byear>
<bpages>112&#x2013;119</bpages>
</citation>
<citation from='year' key='BDR+18' id='bid7' userid='cite:blankenbach201822' type='inproceedings'>
<bauteurs><bpers prenom='K.' nom='Blankenbach' prenomcomplet='Karlheinz'/><bpers prenom='P.' nom='Duchemin' prenomcomplet='Peter'/><bpers prenom='B.' nom='Rist' prenomcomplet='Benjamin'/><bpers prenom='D.' nom='Bogner' prenomcomplet='Danny'/><bpers prenom='M.' nom='Krause' prenomcomplet='Marcel'/></bauteurs>
<btitle>22-2: Smart Pharmaceutical Packaging with E-Paper Display for improved Patient Compliance</btitle>
<bbooktitle>SID Symposium Digest of Technical Papers</bbooktitle>
<bnumber>1</bnumber>
<bvolume>49</bvolume>
<borganization>Wiley Online Library</borganization>
<bpages>271&#x2013;274</bpages>
<byear>2018</byear>
</citation>
<citation from='year' key='BDZP+13' id='bid3' userid='cite:benedetto2013readers' type='article'>
<bauteurs><bpers prenom='S.' nom='Benedetto' prenomcomplet='Simone'/><bpers prenom='V.' nom='Drai-Zerbib' prenomcomplet='VÈronique'/><bpers prenom='M.' nom='Pedrotti' prenomcomplet='Marco'/><bpers prenom='G.' nom='Tissier' prenomcomplet='Geoffrey'/><bpers prenom='T.' nom='Baccino' prenomcomplet='Thierry'/></bauteurs>
<btitle>E-readers and visual fatigue</btitle>
<bjournal>PloS one</bjournal>
<bnumber>12</bnumber>
<bvolume>8</bvolume>
<byear>2013</byear>
<bpages>e83676</bpages>
</citation>
<citation from='year' key='CSH+18' id='bid6' userid='cite:chiu2018interactive' type='incollection'>
<bauteurs><bpers prenom='P.-S.' nom='Chiu' prenomcomplet='Po-Sheng'/><bpers prenom='Y.-N.' nom='Su' prenomcomplet='Yen-Ning'/><bpers prenom='Y.-M.' nom='Huang' prenomcomplet='Yueh-Min'/><bpers prenom='Y.-H.' nom='Pu' prenomcomplet='Ying-Hung'/><bpers prenom='P.-Y.' nom='Cheng' prenomcomplet='Pei-Yu'/><bpers prenom='I.-C.' nom='Chao' prenomcomplet='I-Ching'/><bpers prenom='Y.-M.' nom='Huang' prenomcomplet='Yong-Ming'/></bauteurs>
<btitle>Interactive Electronic Book for Authentic Learning</btitle>
<bbooktitle>Authentic Learning Through Advances in Technologies</bbooktitle>
<bpublisher>Springer</bpublisher>
<byear>2018</byear>
<bpages>45&#x2013;60</bpages>
</citation>
<citation from='year' key='DNP18' id='bid8' userid='cite:dierk2018alterwear' type='inproceedings'>
<bauteurs><bpers prenom='C.' nom='Dierk' prenomcomplet='Christine'/><bpers prenom='M. J. P.' nom='Nicholas' prenomcomplet='Molly Jane Pearce'/><bpers prenom='E.' nom='Paulos' prenomcomplet='Eric'/></bauteurs>
<btitle>AlterWear: Battery-free wearable displays for opportunistic interactions</btitle>
<bbooktitle>Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems</bbooktitle>
<borganization>ACM</borganization>
<bpages>220</bpages>
<byear>2018</byear>
</citation>
<citation from='year' key='Ell18' id='bid13' userid='cite:elliott2018' type='article'>
<bauteurs><bpers prenom='G. W.' nom='Elliott Wen' prenomcomplet='Gerald Weber'/></bauteurs>
<btitle>SwiftLaTeX: Exploring the true WYSWIYG editing for publication</btitle>
<bjournal>DocEng</bjournal>
<byear>2018</byear>
</citation>
<citation from='year' key='EME' id='bid22' userid='cite:emelyanovcriu' type='misc'>
<bauteurs><bpers prenom='P.' nom='EMELYANOV' prenomcomplet='P'/></bauteurs>
<btitle>CRIU: Checkpoint/Restore In Userspace, July 2011</btitle>
</citation>
<citation from='year' key='F19' id='bid16' userid='cite:foxitreader' type='misc'>
<bauteurs><bpers prenom='' nom='Foxit Reader'/></bauteurs>
<btitle>PDF Viewer from Foxit Software</btitle>
<bhowpublished><xref url='https://goo.gl/w1918D'>https://<allowbreak/>goo.<allowbreak/>gl/<allowbreak/>w1918D</xref></bhowpublished>
<byear>2019</byear>
</citation>
<citation from='year' key='HD06' id='bid21' userid='cite:hargrove2006berkeley' type='inproceedings'>
<bauteurs><bpers prenom='P. H.' nom='Hargrove' prenomcomplet='Paul H'/><bpers prenom='J. C.' nom='Duell' prenomcomplet='Jason C'/></bauteurs>
<btitle>Berkeley lab checkpoint/restart (blcr) for linux clusters</btitle>
<bbooktitle>Journal of Physics: Conference Series</bbooktitle>
<bnumber>1</bnumber>
<bvolume>46</bvolume>
<borganization>IOP Publishing</borganization>
<bpages>494</bpages>
<byear>2006</byear>
</citation>
<citation from='year' key='hoo' id='bid23' userid='cite:hooking' type='misc'>
<btitle>Dynamic linker hooking techniques</btitle>
<xref url='http://man7.org/linux/man-pages/man8/ld.so.8.html'>http://<allowbreak/>man7.<allowbreak/>org/<allowbreak/>linux/<allowbreak/>man-pages/<allowbreak/>man8/<allowbreak/>ld.<allowbreak/>so.<allowbreak/>8.<allowbreak/>html</xref></citation>
<citation from='year' key='Int' id='bid24' userid='cite:onyxboox' type='misc'>
<bauteurs><bpers prenom='O.' nom='Intl' prenomcomplet='Onyx'/></bauteurs>
<btitle>ONYX BOOX electronic books</btitle>
<xref url='https://onyxboox.com'>https://<allowbreak/>onyxboox.<allowbreak/>com</xref></citation>
<citation from='year' key='Kas02' id='bid11' userid='cite:kastrup2002revisiting' type='article'>
<bauteurs><bpers prenom='D.' nom='Kastrup' prenomcomplet='David'/></bauteurs>
<btitle>Revisiting WYSIWYG paradigms for authoring LATEX</btitle>
<bjournal>COMMUNICATIONS OF THE TEX USERS GROUP TUGBOAT EDITOR BARBARA BEETON PROCEEDINGS EDITORS KAJA CHRISTIANSEN</bjournal>
<bnumber>1</bnumber>
<bvolume>23</bvolume>
<byear>2002</byear>
<bpages>57</bpages>
</citation>
<citation from='year' key='mup18' id='bid18' userid='cite:mupdf' type='misc'>
<bauteurs><bpers prenom='' nom='mupdf'/></bauteurs>
<btitle>MuPDF, a lightweight PDF, XPS, and E-book viewer</btitle>
<byear>2018</byear>
<xref url='https://mupdf.com'>https://<allowbreak/>mupdf.<allowbreak/>com</xref></citation>
<citation from='year' key='Nie09' id='bid29' userid='cite:nielsen2009discount' type='article'>
<bauteurs><bpers prenom='J.' nom='Nielsen' prenomcomplet='Jakob'/></bauteurs>
<btitle>Discount usability: 20 years</btitle>
<bjournal>Jakob Nielsen's Alertbox Available at http://www. useit. com/alertbox/discount-usability. html [Accessed 23 January 2012]</bjournal>
<byear>2009</byear>
</citation>
<citation from='year' key='Nie15' id='bid28' userid='cite:nielsen2015you' type='article'>
<bauteurs><bpers prenom='J.' nom='Nielsen' prenomcomplet='Jakob'/></bauteurs>
<btitle>Why you only need to test with 5 users, March 19, 2000</btitle>
<bjournal>Useit.com Alertbox</bjournal>
<bvolume>27</bvolume>
<byear>2015</byear>
</citation>
<citation from='year' key='Nie89' id='bid27' userid='cite:nielsen1989usability' type='inproceedings'>
<bauteurs><bpers prenom='J.' nom='Nielsen' prenomcomplet='Jakob'/></bauteurs>
<btitle>Usability engineering at a discount</btitle>
<bbooktitle>Proceedings of the third international conference on human-computer interaction on Designing and using human-computer interfaces and knowledge based systems (2nd ed.)</bbooktitle>
<borganization>Elsevier Science Inc.</borganization>
<bpages>394&#x2013;401</bpages>
<byear>1989</byear>
</citation>
<citation from='year' key='nxp' id='bid26' userid='cite:nxpsoc' type='misc'>
<btitle>i.MX6 Quad Applications Processors</btitle>
<xref url='https://goo.gl/mqtw9v'>https://<allowbreak/>goo.<allowbreak/>gl/<allowbreak/>mqtw9v</xref></citation>
<citation from='year' key='Ove18' id='bid10' userid='cite:overleaf' type='misc'>
<bauteurs><bpers prenom='' nom='Overleaf'/></bauteurs>
<btitle>Overleaf, Collaborative Writing and Publishing</btitle>
<byear>2018</byear>
<xref url='https://www.overleaf.com'>https://<allowbreak/>www.<allowbreak/>overleaf.<allowbreak/>com</xref></citation>
<citation from='year' key='PODI+17' id='bid14' userid='cite:peroni2017research' type='article'>
<bauteurs><bpers prenom='S.' nom='Peroni' prenomcomplet='Silvio'/><bpers prenom='F.' nom='Osborne' prenomcomplet='Francesco'/><bpers prenom='A.' nom='Di Iorio' prenomcomplet='Angelo'/><bpers prenom='A. G.' nom='Nuzzolese' prenomcomplet='Andrea Giovanni'/><bpers prenom='F.' nom='Poggi' prenomcomplet='Francesco'/><bpers prenom='F.' nom='Vitali' prenomcomplet='Fabio'/><bpers prenom='E.' nom='Motta' prenomcomplet='Enrico'/></bauteurs>
<btitle>Research Articles in Simplified HTML: a Web-first format for HTML-based scholarly articles</btitle>
<bjournal>PeerJ Computer Science</bjournal>
<bvolume>3</bvolume>
<byear>2017</byear>
<bpages>e132</bpages>
</citation>
<citation from='year' key='R18' id='bid0' userid='cite:researchmarket' type='misc'>
<bauteurs><bpers prenom='' nom='Research and Markets'/></bauteurs>
<btitle>e-Paper Display Market 2016-2020</btitle>
<bhowpublished><xref url='https://goo.gl/PvVHTs'>https://<allowbreak/>goo.<allowbreak/>gl/<allowbreak/>PvVHTs</xref></bhowpublished>
<byear>2018</byear>
</citation>
<citation from='year' key='reM' id='bid25' userid='cite:reMarkable' type='misc'>
<btitle>reMarkable:Paper-like Tablet</btitle>
<xref url='https://remarkable.com/'>https://<allowbreak/>remarkable.<allowbreak/>com/<allowbreak/></xref></citation>
<citation from='year' key='Sha11' id='bid30' userid='cite:sharedb' type='misc'>
<bauteurs><bpers prenom='' nom='ShareDB'/></bauteurs>
<btitle>ShareDB: A database frontend for concurrent editing systems</btitle>
<byear>2011</byear>
<xref url='https://goo.gl/wAT43N'>https://<allowbreak/>goo.<allowbreak/>gl/<allowbreak/>wAT43N</xref></citation>
<citation from='year' key='Sof11' id='bid12' userid='cite:soft2011bakoma' type='misc'>
<bauteurs><bpers prenom='B.' nom='Soft' prenomcomplet='BaKoMa'/></bauteurs>
<btitle>BaKoMa TEX 9.77</btitle>
<byear>2011</byear>
<xref url='http://www.bakoma.com'>http://<allowbreak/>www.<allowbreak/>bakoma.<allowbreak/>com</xref></citation>
<citation from='year' key='Sou08' id='bid17' userid='cite:souders2008high' type='article'>
<bauteurs><bpers prenom='S.' nom='Souders' prenomcomplet='Steve'/></bauteurs>
<btitle>High-performance web sites</btitle>
<bjournal>Communications of the ACM</bjournal>
<bnumber>12</bnumber>
<bvolume>51</bvolume>
<byear>2008</byear>
<bpages>36&#x2013;41</bpages>
</citation>
<citation from='year' key='SWBG11' id='bid1' userid='cite:siegenthaler2011comparing' type='article'>
<bauteurs><bpers prenom='E.' nom='Siegenthaler' prenomcomplet='Eva'/><bpers prenom='P.' nom='Wurtz' prenomcomplet='Pascal'/><bpers prenom='P.' nom='Bergamin' prenomcomplet='Per'/><bpers prenom='R.' nom='Groner' prenomcomplet='Rudolf'/></bauteurs>
<btitle>Comparing reading processes on e-ink displays and print</btitle>
<bjournal>Displays</bjournal>
<bnumber>5</bnumber>
<bvolume>32</bvolume>
<byear>2011</byear>
<bpages>268&#x2013;273</bpages>
</citation>
<citation from='year' key='SWG10' id='bid2' userid='cite:siegenthaler2010improving' type='article'>
<bauteurs><bpers prenom='E.' nom='Siegenthaler' prenomcomplet='Eva'/><bpers prenom='P.' nom='Wurtz' prenomcomplet='Pascal'/><bpers prenom='R.' nom='Groner' prenomcomplet='Rudolf'/></bauteurs>
<btitle>Improving the usability of E-book readers</btitle>
<bjournal>Journal of Usability Studies</bjournal>
<bnumber>1</bnumber>
<bvolume>6</bvolume>
<byear>2010</byear>
<bpages>25&#x2013;38</bpages>
</citation>
<citation from='year' key='Wil03' id='bid19' userid='cite:williams2003font' type='article'>
<bauteurs><bpers prenom='G.' nom='Williams' prenomcomplet='George'/></bauteurs>
<btitle>Font creation with FontForge</btitle>
<bjournal>EuroTEX 2003 Proceedings, TUGboat</bjournal>
<bnumber>3</bnumber>
<bvolume>24</bvolume>
<byear>2003</byear>
<bpages>531&#x2013;544</bpages>
</citation>
<citation from='year' key='WL13a' id='bid20' userid='cite:wang2013online' type='misc'>
<bauteurs><bpers prenom='L.' nom='WANG' prenomcomplet='Lu'/><bpers prenom='W.' nom='LIU' prenomcomplet='Wanmin'/></bauteurs>
<btitle>Pdf2htmlEX</btitle>
<byear>2013</byear>
<xref url='https://goo.gl/89SDo6'>https://<allowbreak/>goo.<allowbreak/>gl/<allowbreak/>89SDo6</xref></citation>
<citation from='year' key='WL13b' id='bid15' userid='cite:wang2013onlineperformance' type='misc'>
<bauteurs><bpers prenom='L.' nom='WANG' prenomcomplet='Lu'/><bpers prenom='W.' nom='LIU' prenomcomplet='Wanmin'/></bauteurs>
<btitle>Performance Comparison Between PDFs and HTMLs</btitle>
<byear>2013</byear>
<xref url='https://goo.gl/s2yd1x'>https://<allowbreak/>goo.<allowbreak/>gl/<allowbreak/>s2yd1x</xref></citation>
<citation from='year' key='WW18' id='bid9' userid='cite:wen2018going' type='inproceedings'>
<bauteurs><bpers prenom='E.' nom='Wen' prenomcomplet='Elliott'/><bpers prenom='G.' nom='Weber' prenomcomplet='Gerald'/></bauteurs>
<btitle>Going Grey: Exploring the Potential of Electrophoretic Displays</btitle>
<bbooktitle>Proceedings of the 2018 ACM International Joint Conference and 2018 International Symposium on Pervasive and Ubiquitous Computing and Wearable Computers</bbooktitle>
<borganization>ACM</borganization>
<bpages>1761&#x2013;1764</bpages>
<byear>2018</byear>
</citation>
<citation from='year' key='ZC12' id='bid5' userid='cite:zambarbieri2012eye' type='article'>
<bauteurs><bpers prenom='D.' nom='Zambarbieri' prenomcomplet='Daniela'/><bpers prenom='E.' nom='Carniglia' prenomcomplet='Elena'/></bauteurs>
<btitle>Eye movement analysis of reading from computer displays, eReaders and printed books</btitle>
<bjournal>Ophthalmic and Physiological Optics</bjournal>
<bnumber>5</bnumber>
<bvolume>32</bvolume>
<byear>2012</byear>
<bpages>390&#x2013;396</bpages>
</citation></biblio></div0></unknown>
